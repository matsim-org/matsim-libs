// Generated by jextract

package edu.metis;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class metis_h {

    metis_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }


    static {
       // System.loadLibrary("metis");
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final OfInt C_INT = ValueLayout.JAVA_INT;
    public static final OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE));
    public static final OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int IDXTYPEWIDTH = (int)32L;
    /**
     * {@snippet lang=c :
     * #define IDXTYPEWIDTH 32
     * }
     */
    public static int IDXTYPEWIDTH() {
        return IDXTYPEWIDTH;
    }
    private static final int METIS_VER_MAJOR = (int)5L;
    /**
     * {@snippet lang=c :
     * #define METIS_VER_MAJOR 5
     * }
     */
    public static int METIS_VER_MAJOR() {
        return METIS_VER_MAJOR;
    }
    private static final int METIS_VER_MINOR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define METIS_VER_MINOR 1
     * }
     */
    public static int METIS_VER_MINOR() {
        return METIS_VER_MINOR;
    }
    private static final int METIS_VER_SUBMINOR = (int)0L;
    /**
     * {@snippet lang=c :
     * #define METIS_VER_SUBMINOR 0
     * }
     */
    public static int METIS_VER_SUBMINOR() {
        return METIS_VER_SUBMINOR;
    }
    private static final int METIS_NOPTIONS = (int)40L;
    /**
     * {@snippet lang=c :
     * #define METIS_NOPTIONS 40
     * }
     */
    public static int METIS_NOPTIONS() {
        return METIS_NOPTIONS;
    }
    /**
     * {@snippet lang=c :
     * typedef int32_t idx_t
     * }
     */
    public static final OfInt idx_t = metis_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef float real_t
     * }
     */
    public static final OfFloat real_t = metis_h.C_FLOAT;

    private static class METIS_PartGraphRecursive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            metis_h.C_INT,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER
        );

        public static final MemorySegment ADDR = metis_h.findOrThrow("METIS_PartGraphRecursive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int METIS_PartGraphRecursive(idx_t *nvtxs, idx_t *ncon, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *vsize, idx_t *adjwgt, idx_t *nparts, real_t *tpwgts, real_t *ubvec, idx_t *options, idx_t *edgecut, idx_t *part)
     * }
     */
    public static FunctionDescriptor METIS_PartGraphRecursive$descriptor() {
        return METIS_PartGraphRecursive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int METIS_PartGraphRecursive(idx_t *nvtxs, idx_t *ncon, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *vsize, idx_t *adjwgt, idx_t *nparts, real_t *tpwgts, real_t *ubvec, idx_t *options, idx_t *edgecut, idx_t *part)
     * }
     */
    public static MethodHandle METIS_PartGraphRecursive$handle() {
        return METIS_PartGraphRecursive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int METIS_PartGraphRecursive(idx_t *nvtxs, idx_t *ncon, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *vsize, idx_t *adjwgt, idx_t *nparts, real_t *tpwgts, real_t *ubvec, idx_t *options, idx_t *edgecut, idx_t *part)
     * }
     */
    public static MemorySegment METIS_PartGraphRecursive$address() {
        return METIS_PartGraphRecursive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int METIS_PartGraphRecursive(idx_t *nvtxs, idx_t *ncon, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *vsize, idx_t *adjwgt, idx_t *nparts, real_t *tpwgts, real_t *ubvec, idx_t *options, idx_t *edgecut, idx_t *part)
     * }
     */
    public static int METIS_PartGraphRecursive(MemorySegment nvtxs, MemorySegment ncon, MemorySegment xadj, MemorySegment adjncy, MemorySegment vwgt, MemorySegment vsize, MemorySegment adjwgt, MemorySegment nparts, MemorySegment tpwgts, MemorySegment ubvec, MemorySegment options, MemorySegment edgecut, MemorySegment part) {
        var mh$ = METIS_PartGraphRecursive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("METIS_PartGraphRecursive", nvtxs, ncon, xadj, adjncy, vwgt, vsize, adjwgt, nparts, tpwgts, ubvec, options, edgecut, part);
            }
            return (int)mh$.invokeExact(nvtxs, ncon, xadj, adjncy, vwgt, vsize, adjwgt, nparts, tpwgts, ubvec, options, edgecut, part);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class METIS_PartGraphKway {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            metis_h.C_INT,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER
        );

        public static final MemorySegment ADDR = metis_h.findOrThrow("METIS_PartGraphKway");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int METIS_PartGraphKway(idx_t *nvtxs, idx_t *ncon, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *vsize, idx_t *adjwgt, idx_t *nparts, real_t *tpwgts, real_t *ubvec, idx_t *options, idx_t *edgecut, idx_t *part)
     * }
     */
    public static FunctionDescriptor METIS_PartGraphKway$descriptor() {
        return METIS_PartGraphKway.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int METIS_PartGraphKway(idx_t *nvtxs, idx_t *ncon, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *vsize, idx_t *adjwgt, idx_t *nparts, real_t *tpwgts, real_t *ubvec, idx_t *options, idx_t *edgecut, idx_t *part)
     * }
     */
    public static MethodHandle METIS_PartGraphKway$handle() {
        return METIS_PartGraphKway.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int METIS_PartGraphKway(idx_t *nvtxs, idx_t *ncon, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *vsize, idx_t *adjwgt, idx_t *nparts, real_t *tpwgts, real_t *ubvec, idx_t *options, idx_t *edgecut, idx_t *part)
     * }
     */
    public static MemorySegment METIS_PartGraphKway$address() {
        return METIS_PartGraphKway.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int METIS_PartGraphKway(idx_t *nvtxs, idx_t *ncon, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *vsize, idx_t *adjwgt, idx_t *nparts, real_t *tpwgts, real_t *ubvec, idx_t *options, idx_t *edgecut, idx_t *part)
     * }
     */
    public static int METIS_PartGraphKway(MemorySegment nvtxs, MemorySegment ncon, MemorySegment xadj, MemorySegment adjncy, MemorySegment vwgt, MemorySegment vsize, MemorySegment adjwgt, MemorySegment nparts, MemorySegment tpwgts, MemorySegment ubvec, MemorySegment options, MemorySegment edgecut, MemorySegment part) {
        var mh$ = METIS_PartGraphKway.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("METIS_PartGraphKway", nvtxs, ncon, xadj, adjncy, vwgt, vsize, adjwgt, nparts, tpwgts, ubvec, options, edgecut, part);
            }
            return (int)mh$.invokeExact(nvtxs, ncon, xadj, adjncy, vwgt, vsize, adjwgt, nparts, tpwgts, ubvec, options, edgecut, part);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class METIS_MeshToDual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            metis_h.C_INT,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER
        );

        public static final MemorySegment ADDR = metis_h.findOrThrow("METIS_MeshToDual");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int METIS_MeshToDual(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *ncommon, idx_t *numflag, idx_t **r_xadj, idx_t **r_adjncy)
     * }
     */
    public static FunctionDescriptor METIS_MeshToDual$descriptor() {
        return METIS_MeshToDual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int METIS_MeshToDual(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *ncommon, idx_t *numflag, idx_t **r_xadj, idx_t **r_adjncy)
     * }
     */
    public static MethodHandle METIS_MeshToDual$handle() {
        return METIS_MeshToDual.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int METIS_MeshToDual(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *ncommon, idx_t *numflag, idx_t **r_xadj, idx_t **r_adjncy)
     * }
     */
    public static MemorySegment METIS_MeshToDual$address() {
        return METIS_MeshToDual.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int METIS_MeshToDual(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *ncommon, idx_t *numflag, idx_t **r_xadj, idx_t **r_adjncy)
     * }
     */
    public static int METIS_MeshToDual(MemorySegment ne, MemorySegment nn, MemorySegment eptr, MemorySegment eind, MemorySegment ncommon, MemorySegment numflag, MemorySegment r_xadj, MemorySegment r_adjncy) {
        var mh$ = METIS_MeshToDual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("METIS_MeshToDual", ne, nn, eptr, eind, ncommon, numflag, r_xadj, r_adjncy);
            }
            return (int)mh$.invokeExact(ne, nn, eptr, eind, ncommon, numflag, r_xadj, r_adjncy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class METIS_MeshToNodal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            metis_h.C_INT,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER
        );

        public static final MemorySegment ADDR = metis_h.findOrThrow("METIS_MeshToNodal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int METIS_MeshToNodal(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *numflag, idx_t **r_xadj, idx_t **r_adjncy)
     * }
     */
    public static FunctionDescriptor METIS_MeshToNodal$descriptor() {
        return METIS_MeshToNodal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int METIS_MeshToNodal(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *numflag, idx_t **r_xadj, idx_t **r_adjncy)
     * }
     */
    public static MethodHandle METIS_MeshToNodal$handle() {
        return METIS_MeshToNodal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int METIS_MeshToNodal(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *numflag, idx_t **r_xadj, idx_t **r_adjncy)
     * }
     */
    public static MemorySegment METIS_MeshToNodal$address() {
        return METIS_MeshToNodal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int METIS_MeshToNodal(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *numflag, idx_t **r_xadj, idx_t **r_adjncy)
     * }
     */
    public static int METIS_MeshToNodal(MemorySegment ne, MemorySegment nn, MemorySegment eptr, MemorySegment eind, MemorySegment numflag, MemorySegment r_xadj, MemorySegment r_adjncy) {
        var mh$ = METIS_MeshToNodal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("METIS_MeshToNodal", ne, nn, eptr, eind, numflag, r_xadj, r_adjncy);
            }
            return (int)mh$.invokeExact(ne, nn, eptr, eind, numflag, r_xadj, r_adjncy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class METIS_PartMeshNodal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            metis_h.C_INT,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER
        );

        public static final MemorySegment ADDR = metis_h.findOrThrow("METIS_PartMeshNodal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int METIS_PartMeshNodal(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *vwgt, idx_t *vsize, idx_t *nparts, real_t *tpwgts, idx_t *options, idx_t *objval, idx_t *epart, idx_t *npart)
     * }
     */
    public static FunctionDescriptor METIS_PartMeshNodal$descriptor() {
        return METIS_PartMeshNodal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int METIS_PartMeshNodal(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *vwgt, idx_t *vsize, idx_t *nparts, real_t *tpwgts, idx_t *options, idx_t *objval, idx_t *epart, idx_t *npart)
     * }
     */
    public static MethodHandle METIS_PartMeshNodal$handle() {
        return METIS_PartMeshNodal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int METIS_PartMeshNodal(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *vwgt, idx_t *vsize, idx_t *nparts, real_t *tpwgts, idx_t *options, idx_t *objval, idx_t *epart, idx_t *npart)
     * }
     */
    public static MemorySegment METIS_PartMeshNodal$address() {
        return METIS_PartMeshNodal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int METIS_PartMeshNodal(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *vwgt, idx_t *vsize, idx_t *nparts, real_t *tpwgts, idx_t *options, idx_t *objval, idx_t *epart, idx_t *npart)
     * }
     */
    public static int METIS_PartMeshNodal(MemorySegment ne, MemorySegment nn, MemorySegment eptr, MemorySegment eind, MemorySegment vwgt, MemorySegment vsize, MemorySegment nparts, MemorySegment tpwgts, MemorySegment options, MemorySegment objval, MemorySegment epart, MemorySegment npart) {
        var mh$ = METIS_PartMeshNodal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("METIS_PartMeshNodal", ne, nn, eptr, eind, vwgt, vsize, nparts, tpwgts, options, objval, epart, npart);
            }
            return (int)mh$.invokeExact(ne, nn, eptr, eind, vwgt, vsize, nparts, tpwgts, options, objval, epart, npart);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class METIS_PartMeshDual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            metis_h.C_INT,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER
        );

        public static final MemorySegment ADDR = metis_h.findOrThrow("METIS_PartMeshDual");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int METIS_PartMeshDual(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *vwgt, idx_t *vsize, idx_t *ncommon, idx_t *nparts, real_t *tpwgts, idx_t *options, idx_t *objval, idx_t *epart, idx_t *npart)
     * }
     */
    public static FunctionDescriptor METIS_PartMeshDual$descriptor() {
        return METIS_PartMeshDual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int METIS_PartMeshDual(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *vwgt, idx_t *vsize, idx_t *ncommon, idx_t *nparts, real_t *tpwgts, idx_t *options, idx_t *objval, idx_t *epart, idx_t *npart)
     * }
     */
    public static MethodHandle METIS_PartMeshDual$handle() {
        return METIS_PartMeshDual.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int METIS_PartMeshDual(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *vwgt, idx_t *vsize, idx_t *ncommon, idx_t *nparts, real_t *tpwgts, idx_t *options, idx_t *objval, idx_t *epart, idx_t *npart)
     * }
     */
    public static MemorySegment METIS_PartMeshDual$address() {
        return METIS_PartMeshDual.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int METIS_PartMeshDual(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *vwgt, idx_t *vsize, idx_t *ncommon, idx_t *nparts, real_t *tpwgts, idx_t *options, idx_t *objval, idx_t *epart, idx_t *npart)
     * }
     */
    public static int METIS_PartMeshDual(MemorySegment ne, MemorySegment nn, MemorySegment eptr, MemorySegment eind, MemorySegment vwgt, MemorySegment vsize, MemorySegment ncommon, MemorySegment nparts, MemorySegment tpwgts, MemorySegment options, MemorySegment objval, MemorySegment epart, MemorySegment npart) {
        var mh$ = METIS_PartMeshDual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("METIS_PartMeshDual", ne, nn, eptr, eind, vwgt, vsize, ncommon, nparts, tpwgts, options, objval, epart, npart);
            }
            return (int)mh$.invokeExact(ne, nn, eptr, eind, vwgt, vsize, ncommon, nparts, tpwgts, options, objval, epart, npart);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class METIS_NodeND {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            metis_h.C_INT,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER
        );

        public static final MemorySegment ADDR = metis_h.findOrThrow("METIS_NodeND");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int METIS_NodeND(idx_t *nvtxs, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *options, idx_t *perm, idx_t *iperm)
     * }
     */
    public static FunctionDescriptor METIS_NodeND$descriptor() {
        return METIS_NodeND.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int METIS_NodeND(idx_t *nvtxs, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *options, idx_t *perm, idx_t *iperm)
     * }
     */
    public static MethodHandle METIS_NodeND$handle() {
        return METIS_NodeND.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int METIS_NodeND(idx_t *nvtxs, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *options, idx_t *perm, idx_t *iperm)
     * }
     */
    public static MemorySegment METIS_NodeND$address() {
        return METIS_NodeND.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int METIS_NodeND(idx_t *nvtxs, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *options, idx_t *perm, idx_t *iperm)
     * }
     */
    public static int METIS_NodeND(MemorySegment nvtxs, MemorySegment xadj, MemorySegment adjncy, MemorySegment vwgt, MemorySegment options, MemorySegment perm, MemorySegment iperm) {
        var mh$ = METIS_NodeND.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("METIS_NodeND", nvtxs, xadj, adjncy, vwgt, options, perm, iperm);
            }
            return (int)mh$.invokeExact(nvtxs, xadj, adjncy, vwgt, options, perm, iperm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class METIS_Free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            metis_h.C_INT,
            metis_h.C_POINTER
        );

        public static final MemorySegment ADDR = metis_h.findOrThrow("METIS_Free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int METIS_Free(void *ptr)
     * }
     */
    public static FunctionDescriptor METIS_Free$descriptor() {
        return METIS_Free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int METIS_Free(void *ptr)
     * }
     */
    public static MethodHandle METIS_Free$handle() {
        return METIS_Free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int METIS_Free(void *ptr)
     * }
     */
    public static MemorySegment METIS_Free$address() {
        return METIS_Free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int METIS_Free(void *ptr)
     * }
     */
    public static int METIS_Free(MemorySegment ptr) {
        var mh$ = METIS_Free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("METIS_Free", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class METIS_SetDefaultOptions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            metis_h.C_INT,
            metis_h.C_POINTER
        );

        public static final MemorySegment ADDR = metis_h.findOrThrow("METIS_SetDefaultOptions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int METIS_SetDefaultOptions(idx_t *options)
     * }
     */
    public static FunctionDescriptor METIS_SetDefaultOptions$descriptor() {
        return METIS_SetDefaultOptions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int METIS_SetDefaultOptions(idx_t *options)
     * }
     */
    public static MethodHandle METIS_SetDefaultOptions$handle() {
        return METIS_SetDefaultOptions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int METIS_SetDefaultOptions(idx_t *options)
     * }
     */
    public static MemorySegment METIS_SetDefaultOptions$address() {
        return METIS_SetDefaultOptions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int METIS_SetDefaultOptions(idx_t *options)
     * }
     */
    public static int METIS_SetDefaultOptions(MemorySegment options) {
        var mh$ = METIS_SetDefaultOptions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("METIS_SetDefaultOptions", options);
            }
            return (int)mh$.invokeExact(options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class METIS_NodeNDP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            metis_h.C_INT,
            metis_h.C_INT,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_INT,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER
        );

        public static final MemorySegment ADDR = metis_h.findOrThrow("METIS_NodeNDP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int METIS_NodeNDP(idx_t nvtxs, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t npes, idx_t *options, idx_t *perm, idx_t *iperm, idx_t *sizes)
     * }
     */
    public static FunctionDescriptor METIS_NodeNDP$descriptor() {
        return METIS_NodeNDP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int METIS_NodeNDP(idx_t nvtxs, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t npes, idx_t *options, idx_t *perm, idx_t *iperm, idx_t *sizes)
     * }
     */
    public static MethodHandle METIS_NodeNDP$handle() {
        return METIS_NodeNDP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int METIS_NodeNDP(idx_t nvtxs, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t npes, idx_t *options, idx_t *perm, idx_t *iperm, idx_t *sizes)
     * }
     */
    public static MemorySegment METIS_NodeNDP$address() {
        return METIS_NodeNDP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int METIS_NodeNDP(idx_t nvtxs, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t npes, idx_t *options, idx_t *perm, idx_t *iperm, idx_t *sizes)
     * }
     */
    public static int METIS_NodeNDP(int nvtxs, MemorySegment xadj, MemorySegment adjncy, MemorySegment vwgt, int npes, MemorySegment options, MemorySegment perm, MemorySegment iperm, MemorySegment sizes) {
        var mh$ = METIS_NodeNDP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("METIS_NodeNDP", nvtxs, xadj, adjncy, vwgt, npes, options, perm, iperm, sizes);
            }
            return (int)mh$.invokeExact(nvtxs, xadj, adjncy, vwgt, npes, options, perm, iperm, sizes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class METIS_ComputeVertexSeparator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            metis_h.C_INT,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER
        );

        public static final MemorySegment ADDR = metis_h.findOrThrow("METIS_ComputeVertexSeparator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int METIS_ComputeVertexSeparator(idx_t *nvtxs, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *options, idx_t *sepsize, idx_t *part)
     * }
     */
    public static FunctionDescriptor METIS_ComputeVertexSeparator$descriptor() {
        return METIS_ComputeVertexSeparator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int METIS_ComputeVertexSeparator(idx_t *nvtxs, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *options, idx_t *sepsize, idx_t *part)
     * }
     */
    public static MethodHandle METIS_ComputeVertexSeparator$handle() {
        return METIS_ComputeVertexSeparator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int METIS_ComputeVertexSeparator(idx_t *nvtxs, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *options, idx_t *sepsize, idx_t *part)
     * }
     */
    public static MemorySegment METIS_ComputeVertexSeparator$address() {
        return METIS_ComputeVertexSeparator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int METIS_ComputeVertexSeparator(idx_t *nvtxs, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *options, idx_t *sepsize, idx_t *part)
     * }
     */
    public static int METIS_ComputeVertexSeparator(MemorySegment nvtxs, MemorySegment xadj, MemorySegment adjncy, MemorySegment vwgt, MemorySegment options, MemorySegment sepsize, MemorySegment part) {
        var mh$ = METIS_ComputeVertexSeparator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("METIS_ComputeVertexSeparator", nvtxs, xadj, adjncy, vwgt, options, sepsize, part);
            }
            return (int)mh$.invokeExact(nvtxs, xadj, adjncy, vwgt, options, sepsize, part);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class METIS_NodeRefine {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            metis_h.C_INT,
            metis_h.C_INT,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_POINTER,
            metis_h.C_FLOAT
        );

        public static final MemorySegment ADDR = metis_h.findOrThrow("METIS_NodeRefine");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int METIS_NodeRefine(idx_t nvtxs, idx_t *xadj, idx_t *vwgt, idx_t *adjncy, idx_t *where, idx_t *hmarker, real_t ubfactor)
     * }
     */
    public static FunctionDescriptor METIS_NodeRefine$descriptor() {
        return METIS_NodeRefine.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int METIS_NodeRefine(idx_t nvtxs, idx_t *xadj, idx_t *vwgt, idx_t *adjncy, idx_t *where, idx_t *hmarker, real_t ubfactor)
     * }
     */
    public static MethodHandle METIS_NodeRefine$handle() {
        return METIS_NodeRefine.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int METIS_NodeRefine(idx_t nvtxs, idx_t *xadj, idx_t *vwgt, idx_t *adjncy, idx_t *where, idx_t *hmarker, real_t ubfactor)
     * }
     */
    public static MemorySegment METIS_NodeRefine$address() {
        return METIS_NodeRefine.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int METIS_NodeRefine(idx_t nvtxs, idx_t *xadj, idx_t *vwgt, idx_t *adjncy, idx_t *where, idx_t *hmarker, real_t ubfactor)
     * }
     */
    public static int METIS_NodeRefine(int nvtxs, MemorySegment xadj, MemorySegment vwgt, MemorySegment adjncy, MemorySegment where, MemorySegment hmarker, float ubfactor) {
        var mh$ = METIS_NodeRefine.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("METIS_NodeRefine", nvtxs, xadj, vwgt, adjncy, where, hmarker, ubfactor);
            }
            return (int)mh$.invokeExact(nvtxs, xadj, vwgt, adjncy, where, hmarker, ubfactor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int METIS_OK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OK = 1
     * }
     */
    public static int METIS_OK() {
        return METIS_OK;
    }
    private static final int METIS_ERROR_INPUT = (int)-2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_ERROR_INPUT = -2
     * }
     */
    public static int METIS_ERROR_INPUT() {
        return METIS_ERROR_INPUT;
    }
    private static final int METIS_ERROR_MEMORY = (int)-3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_ERROR_MEMORY = -3
     * }
     */
    public static int METIS_ERROR_MEMORY() {
        return METIS_ERROR_MEMORY;
    }
    private static final int METIS_ERROR = (int)-4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_ERROR = -4
     * }
     */
    public static int METIS_ERROR() {
        return METIS_ERROR;
    }
    private static final int METIS_OP_PMETIS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OP_PMETIS = 0
     * }
     */
    public static int METIS_OP_PMETIS() {
        return METIS_OP_PMETIS;
    }
    private static final int METIS_OP_KMETIS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OP_KMETIS = 1
     * }
     */
    public static int METIS_OP_KMETIS() {
        return METIS_OP_KMETIS;
    }
    private static final int METIS_OP_OMETIS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OP_OMETIS = 2
     * }
     */
    public static int METIS_OP_OMETIS() {
        return METIS_OP_OMETIS;
    }
    private static final int METIS_OPTION_PTYPE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_PTYPE = 0
     * }
     */
    public static int METIS_OPTION_PTYPE() {
        return METIS_OPTION_PTYPE;
    }
    private static final int METIS_OPTION_OBJTYPE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_OBJTYPE = 1
     * }
     */
    public static int METIS_OPTION_OBJTYPE() {
        return METIS_OPTION_OBJTYPE;
    }
    private static final int METIS_OPTION_CTYPE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_CTYPE = 2
     * }
     */
    public static int METIS_OPTION_CTYPE() {
        return METIS_OPTION_CTYPE;
    }
    private static final int METIS_OPTION_IPTYPE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_IPTYPE = 3
     * }
     */
    public static int METIS_OPTION_IPTYPE() {
        return METIS_OPTION_IPTYPE;
    }
    private static final int METIS_OPTION_RTYPE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_RTYPE = 4
     * }
     */
    public static int METIS_OPTION_RTYPE() {
        return METIS_OPTION_RTYPE;
    }
    private static final int METIS_OPTION_DBGLVL = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_DBGLVL = 5
     * }
     */
    public static int METIS_OPTION_DBGLVL() {
        return METIS_OPTION_DBGLVL;
    }
    private static final int METIS_OPTION_NITER = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_NITER = 6
     * }
     */
    public static int METIS_OPTION_NITER() {
        return METIS_OPTION_NITER;
    }
    private static final int METIS_OPTION_NCUTS = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_NCUTS = 7
     * }
     */
    public static int METIS_OPTION_NCUTS() {
        return METIS_OPTION_NCUTS;
    }
    private static final int METIS_OPTION_SEED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_SEED = 8
     * }
     */
    public static int METIS_OPTION_SEED() {
        return METIS_OPTION_SEED;
    }
    private static final int METIS_OPTION_NO2HOP = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_NO2HOP = 9
     * }
     */
    public static int METIS_OPTION_NO2HOP() {
        return METIS_OPTION_NO2HOP;
    }
    private static final int METIS_OPTION_MINCONN = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_MINCONN = 10
     * }
     */
    public static int METIS_OPTION_MINCONN() {
        return METIS_OPTION_MINCONN;
    }
    private static final int METIS_OPTION_CONTIG = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_CONTIG = 11
     * }
     */
    public static int METIS_OPTION_CONTIG() {
        return METIS_OPTION_CONTIG;
    }
    private static final int METIS_OPTION_COMPRESS = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_COMPRESS = 12
     * }
     */
    public static int METIS_OPTION_COMPRESS() {
        return METIS_OPTION_COMPRESS;
    }
    private static final int METIS_OPTION_CCORDER = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_CCORDER = 13
     * }
     */
    public static int METIS_OPTION_CCORDER() {
        return METIS_OPTION_CCORDER;
    }
    private static final int METIS_OPTION_PFACTOR = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_PFACTOR = 14
     * }
     */
    public static int METIS_OPTION_PFACTOR() {
        return METIS_OPTION_PFACTOR;
    }
    private static final int METIS_OPTION_NSEPS = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_NSEPS = 15
     * }
     */
    public static int METIS_OPTION_NSEPS() {
        return METIS_OPTION_NSEPS;
    }
    private static final int METIS_OPTION_UFACTOR = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_UFACTOR = 16
     * }
     */
    public static int METIS_OPTION_UFACTOR() {
        return METIS_OPTION_UFACTOR;
    }
    private static final int METIS_OPTION_NUMBERING = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_NUMBERING = 17
     * }
     */
    public static int METIS_OPTION_NUMBERING() {
        return METIS_OPTION_NUMBERING;
    }
    private static final int METIS_OPTION_HELP = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_HELP = 18
     * }
     */
    public static int METIS_OPTION_HELP() {
        return METIS_OPTION_HELP;
    }
    private static final int METIS_OPTION_TPWGTS = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_TPWGTS = 19
     * }
     */
    public static int METIS_OPTION_TPWGTS() {
        return METIS_OPTION_TPWGTS;
    }
    private static final int METIS_OPTION_NCOMMON = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_NCOMMON = 20
     * }
     */
    public static int METIS_OPTION_NCOMMON() {
        return METIS_OPTION_NCOMMON;
    }
    private static final int METIS_OPTION_NOOUTPUT = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_NOOUTPUT = 21
     * }
     */
    public static int METIS_OPTION_NOOUTPUT() {
        return METIS_OPTION_NOOUTPUT;
    }
    private static final int METIS_OPTION_BALANCE = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_BALANCE = 22
     * }
     */
    public static int METIS_OPTION_BALANCE() {
        return METIS_OPTION_BALANCE;
    }
    private static final int METIS_OPTION_GTYPE = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_GTYPE = 23
     * }
     */
    public static int METIS_OPTION_GTYPE() {
        return METIS_OPTION_GTYPE;
    }
    private static final int METIS_OPTION_UBVEC = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OPTION_UBVEC = 24
     * }
     */
    public static int METIS_OPTION_UBVEC() {
        return METIS_OPTION_UBVEC;
    }
    private static final int METIS_PTYPE_RB = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_PTYPE_RB = 0
     * }
     */
    public static int METIS_PTYPE_RB() {
        return METIS_PTYPE_RB;
    }
    private static final int METIS_PTYPE_KWAY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_PTYPE_KWAY = 1
     * }
     */
    public static int METIS_PTYPE_KWAY() {
        return METIS_PTYPE_KWAY;
    }
    private static final int METIS_GTYPE_DUAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_GTYPE_DUAL = 0
     * }
     */
    public static int METIS_GTYPE_DUAL() {
        return METIS_GTYPE_DUAL;
    }
    private static final int METIS_GTYPE_NODAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_GTYPE_NODAL = 1
     * }
     */
    public static int METIS_GTYPE_NODAL() {
        return METIS_GTYPE_NODAL;
    }
    private static final int METIS_CTYPE_RM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_CTYPE_RM = 0
     * }
     */
    public static int METIS_CTYPE_RM() {
        return METIS_CTYPE_RM;
    }
    private static final int METIS_CTYPE_SHEM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_CTYPE_SHEM = 1
     * }
     */
    public static int METIS_CTYPE_SHEM() {
        return METIS_CTYPE_SHEM;
    }
    private static final int METIS_IPTYPE_GROW = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_IPTYPE_GROW = 0
     * }
     */
    public static int METIS_IPTYPE_GROW() {
        return METIS_IPTYPE_GROW;
    }
    private static final int METIS_IPTYPE_RANDOM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_IPTYPE_RANDOM = 1
     * }
     */
    public static int METIS_IPTYPE_RANDOM() {
        return METIS_IPTYPE_RANDOM;
    }
    private static final int METIS_IPTYPE_EDGE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_IPTYPE_EDGE = 2
     * }
     */
    public static int METIS_IPTYPE_EDGE() {
        return METIS_IPTYPE_EDGE;
    }
    private static final int METIS_IPTYPE_NODE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_IPTYPE_NODE = 3
     * }
     */
    public static int METIS_IPTYPE_NODE() {
        return METIS_IPTYPE_NODE;
    }
    private static final int METIS_IPTYPE_METISRB = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_IPTYPE_METISRB = 4
     * }
     */
    public static int METIS_IPTYPE_METISRB() {
        return METIS_IPTYPE_METISRB;
    }
    private static final int METIS_RTYPE_FM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_RTYPE_FM = 0
     * }
     */
    public static int METIS_RTYPE_FM() {
        return METIS_RTYPE_FM;
    }
    private static final int METIS_RTYPE_GREEDY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_RTYPE_GREEDY = 1
     * }
     */
    public static int METIS_RTYPE_GREEDY() {
        return METIS_RTYPE_GREEDY;
    }
    private static final int METIS_RTYPE_SEP2SIDED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_RTYPE_SEP2SIDED = 2
     * }
     */
    public static int METIS_RTYPE_SEP2SIDED() {
        return METIS_RTYPE_SEP2SIDED;
    }
    private static final int METIS_RTYPE_SEP1SIDED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_RTYPE_SEP1SIDED = 3
     * }
     */
    public static int METIS_RTYPE_SEP1SIDED() {
        return METIS_RTYPE_SEP1SIDED;
    }
    private static final int METIS_DBG_INFO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_DBG_INFO = 1
     * }
     */
    public static int METIS_DBG_INFO() {
        return METIS_DBG_INFO;
    }
    private static final int METIS_DBG_TIME = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_DBG_TIME = 2
     * }
     */
    public static int METIS_DBG_TIME() {
        return METIS_DBG_TIME;
    }
    private static final int METIS_DBG_COARSEN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_DBG_COARSEN = 4
     * }
     */
    public static int METIS_DBG_COARSEN() {
        return METIS_DBG_COARSEN;
    }
    private static final int METIS_DBG_REFINE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_DBG_REFINE = 8
     * }
     */
    public static int METIS_DBG_REFINE() {
        return METIS_DBG_REFINE;
    }
    private static final int METIS_DBG_IPART = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_DBG_IPART = 16
     * }
     */
    public static int METIS_DBG_IPART() {
        return METIS_DBG_IPART;
    }
    private static final int METIS_DBG_MOVEINFO = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_DBG_MOVEINFO = 32
     * }
     */
    public static int METIS_DBG_MOVEINFO() {
        return METIS_DBG_MOVEINFO;
    }
    private static final int METIS_DBG_SEPINFO = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_DBG_SEPINFO = 64
     * }
     */
    public static int METIS_DBG_SEPINFO() {
        return METIS_DBG_SEPINFO;
    }
    private static final int METIS_DBG_CONNINFO = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_DBG_CONNINFO = 128
     * }
     */
    public static int METIS_DBG_CONNINFO() {
        return METIS_DBG_CONNINFO;
    }
    private static final int METIS_DBG_CONTIGINFO = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_DBG_CONTIGINFO = 256
     * }
     */
    public static int METIS_DBG_CONTIGINFO() {
        return METIS_DBG_CONTIGINFO;
    }
    private static final int METIS_DBG_MEMORY = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_DBG_MEMORY = 2048
     * }
     */
    public static int METIS_DBG_MEMORY() {
        return METIS_DBG_MEMORY;
    }
    private static final int METIS_OBJTYPE_CUT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OBJTYPE_CUT = 0
     * }
     */
    public static int METIS_OBJTYPE_CUT() {
        return METIS_OBJTYPE_CUT;
    }
    private static final int METIS_OBJTYPE_VOL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OBJTYPE_VOL = 1
     * }
     */
    public static int METIS_OBJTYPE_VOL() {
        return METIS_OBJTYPE_VOL;
    }
    private static final int METIS_OBJTYPE_NODE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.METIS_OBJTYPE_NODE = 2
     * }
     */
    public static int METIS_OBJTYPE_NODE() {
        return METIS_OBJTYPE_NODE;
    }
    private static final int IDX_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define IDX_MAX 2147483647
     * }
     */
    public static int IDX_MAX() {
        return IDX_MAX;
    }
    private static final int IDX_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define IDX_MIN -2147483648
     * }
     */
    public static int IDX_MIN() {
        return IDX_MIN;
    }
}

