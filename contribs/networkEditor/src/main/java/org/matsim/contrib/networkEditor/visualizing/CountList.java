/* *********************************************************************** *
 * project: org.matsim.contrib.networkEditor
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 * copyright       : (C) 2010 Daniel Ampuero
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *   See also COPYING, LICENSE and WARRANTY file                           *
 *                                                                         *
 * *********************************************************************** */

package org.matsim.contrib.networkEditor.visualizing;

import java.util.Map;
import java.util.Observable;
import java.util.Observer;

import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.AbstractTableModel;

import org.matsim.api.core.v01.network.Link;
import org.matsim.counts.Count;
import org.matsim.counts.Volume;


/**
 *
 * @author danielmaxx
 */
public class CountList extends javax.swing.JPanel {

    public NetControls controls;
    public NetBlackboard board;
    public CountTableModel tableModel;

    /**
     * For input porpouse
     */
    public int currentHour;
    public double currentVolume;
    public boolean cVFlag;
    public Count currentCount;
    private VolumeInputObserver observer;
    
    public CountList(NetControls controls) {
        this.controls = controls;
        board = controls.board;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(java.awt.Color.white);
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            @Override
						public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            @Override
						public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                formAncestorResized(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hour", "Volume"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class
            };

            @Override
						public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setBackground(java.awt.Color.white);
        jButton1.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jButton1.setForeground(new java.awt.Color(17, 196, 19));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/add.png"))); // NOI18N
        jButton1.setToolTipText("Add Count");
        jButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setIconTextGap(0);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            @Override
						public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(java.awt.Color.white);
        jButton2.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jButton2.setForeground(new java.awt.Color(254, 1, 1));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/minus.png"))); // NOI18N
        jButton2.setToolTipText("Delete Count");
        jButton2.setAutoscrolls(true);
        jButton2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setIconTextGap(0);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            @Override
						public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
						public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(6, 6, 6))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(board.selectedLinkSize()!=1) return;
        currentCount = board.getCountingStation(board.activeLink);
        if(currentCount == null) {
            String name = javax.swing.JOptionPane.showInputDialog("Name of counting station");
            currentCount = board.addCountingStation(board.activeLink, name);
        }
        observer = new VolumeInputObserver(this);
        VolumeInput volume_input = new VolumeInput(observer);
        volume_input.setLocation(this.controls.board.getX()+100, this.controls.board.getY()+100);
        volume_input.run();
        updateTable();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized
        this.setSize(this.getParent().getSize());
    }//GEN-LAST:event_formAncestorResized

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(board.activeLink == null)
            return;
        currentCount = board.getCountingStation(board.activeLink);
        if(currentCount == null)
            return;
        for(int i:jTable1.getSelectedRows()) {
            board.deleteCount(board.activeLink, Integer.valueOf(jTable1.getModel().getValueAt(i, 0).toString()));
        }
        updateTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        if(evt.getClickCount()==2){
            if(currentCount==null)
                return;
            String name = javax.swing.JOptionPane.showInputDialog("Name of counting station", currentCount.getCsLabel());
            currentCount.setCsId(name);
            updateTable();
        }
    }//GEN-LAST:event_jLabel1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables


    public void updateTable() {
        if(board.activeLink == null) {
            tableModel = new CountTableModel();
            jLabel1.setText("");
        } else {
            currentCount = board.counts.getCount(board.activeLink.getId());
            if(currentCount == null) {
                tableModel = new CountTableModel();
                jLabel1.setText("(no existing counts)");
            } else {
                tableModel = new CountTableModel(currentCount);
                jLabel1.setText(currentCount.getCsLabel());
            }
        }
        jTable1.setModel(tableModel);
        jTable1.getModel().addTableModelListener(new CountTableModelListener(this));
        jTable1.repaint();

    }

    public void setCurrentVolume(int h, double v) {
        currentHour = h;
        currentVolume = v;        
    }

    public void setCVFlag(boolean value)  {
        cVFlag = value;
    }

    public boolean getCVFlag() {
         return cVFlag;
    }

    public void addVolume(int h, double v) {
        this.currentCount.createVolume(h, v);
        this.updateTable();
    }

    public boolean existCount(int h) {
        return currentCount.getVolume(h)!=null;
    }

}

class CountTableModel extends AbstractTableModel {

    public int rows, cols;
    Object table[][];
    boolean editable[][];
    String columnName[];
    Count<Link> counts;
    public CountTableModel(){
        init(0);
    }
    public CountTableModel(Count<Link> counts) {
        this.counts = counts;
        init(counts.getVolumes().size());
        int i=0;
        for(Map.Entry<Integer, Volume> entry : counts.getVolumes().entrySet()) {
            table[i][0] = entry.getKey().toString();
            table[i][1] = Double.toString(entry.getValue().getValue());
            ++i;
        }
    }
    private void init(int r) {
        table = new Object[r][2];
        editable = new boolean[r][2];
        for(int i=0; i<editable.length; ++i) {
            editable[i][0] = false;
            editable[i][1] = true;
        }
        columnName = new String[2];
        columnName[0] = "Hour";
        columnName[1] = "Volume";
        rows = r;
        cols = 2;
    }

    @Override
		public int getRowCount(){
        return rows;
    }

    @Override
		public int getColumnCount() {
        return cols;
    }
    @Override
    public String getColumnName(int columnIndex) {
        return columnName[columnIndex];
    }
    @Override
    public Class<?> getColumnClass(int columnIndex) {
        return this.getValueAt(0, columnIndex).getClass();
    }
    @Override
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return editable[rowIndex][columnIndex];
    }
    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        return table[rowIndex][columnIndex];
    }
    @Override
    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
        if(counts == null)
            return;
        if(columnIndex == 0) {
            int oldVal = Integer.valueOf(table[rowIndex][columnIndex].toString());
            //System.out.println(oldVal);
            double vol = counts.getVolumes().get(oldVal).getValue();
            counts.getVolumes().remove(oldVal);
            int val = Integer.valueOf(aValue.toString());
            table[rowIndex][columnIndex] = val;
            counts.createVolume(val, vol);
        } else {
            System.out.println(aValue.toString());
            double val = Double.parseDouble(aValue.toString());
            table[rowIndex][columnIndex] = val;
            int h = counts.getVolumes().get(Integer.valueOf(table[rowIndex][0].toString())).getHourOfDayStartingWithOne();
            counts.getVolumes().remove(h);
            counts.createVolume(h, val);
        }
        fireTableCellUpdated(rowIndex, columnIndex);
    }

}

class CountTableModelListener implements TableModelListener {
    public CountList cList;

    CountTableModelListener(CountList c) {
        cList = c;
    }

    @Override
		public void tableChanged(TableModelEvent evt) {
        CountTableModel tableModel = (CountTableModel)evt.getSource();
        if (evt.getType() == TableModelEvent.UPDATE) {
            int column = evt.getColumn();
            int row = evt.getFirstRow();
            String rawdata = tableModel.getValueAt(row, column).toString();
            double data = 0;
            try {
                data = Double.parseDouble(rawdata);
            } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(cList, "Values must be numeric.", "Format error", javax.swing.JOptionPane.WARNING_MESSAGE);
                cList.updateTable();
                //e.printStackTrace();
                return;
            }
            int hour = Integer.parseInt(tableModel.getValueAt(row, 0).toString());
            tableModel.setValueAt(data, row, column);
            cList.board.editCount(cList.board.activeLink, hour, data);
            cList.updateTable();
        }
    }
 }

class VolumeInputObserver implements Observer {

    private CountList dad;

    public VolumeInputObserver(CountList dad) {
        this.dad = dad;
    }

    @Override
		public void update(Observable obs, Object arg) {
        if(arg!=null) {
            MyVolume myvol = (MyVolume)arg;
            if(myvol.h_ < 1 || myvol.h_ > 24)
                javax.swing.JOptionPane.showMessageDialog(dad, "Invalid Hour", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            if(myvol.v_ < 0.0)
                javax.swing.JOptionPane.showMessageDialog(dad, "Invalid Volume", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            if(dad.existCount(myvol.h_)) {
                if(javax.swing.JOptionPane.showConfirmDialog(dad, "Hour already exists, replace it?", "Warning", javax.swing.JOptionPane.YES_NO_OPTION) == javax.swing.JOptionPane.OK_OPTION)
                    dad.addVolume(myvol.h_, myvol.v_);
            } else
                dad.addVolume(myvol.h_, myvol.v_);
        }
    }
}
