/* *********************************************************************** *
 * project: org.matsim.contrib.networkEditor
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 * copyright       : (C) 2010 Daniel Ampuero
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *   See also COPYING, LICENSE and WARRANTY file                           *
 *                                                                         *
 * *********************************************************************** */

package org.matsim.contrib.networkEditor.visualizing;

import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.AbstractTableModel;

import org.matsim.api.core.v01.network.Link;
import org.matsim.api.core.v01.network.Node;
import org.matsim.core.network.NetworkUtils;
import org.matsim.core.utils.geometry.CoordUtils;

/**
 * @author danielmaxx
 */
public class NetControls extends javax.swing.JPanel {

	public NetBlackboard board;
	private MyTableModel tableModel;
	public DifferenceManager diffManager;
	public CountList countList;
	private boolean selected[];
	private final int numToggle = NetBlackboard.Mode.values().length;
	javax.swing.JToggleButton toggles[];

	/** Creates new form NetControls */
	public NetControls(NetBlackboard b) {
		board = b;
		tableModel = new MyTableModel();
		initComponents();
		toggles = new javax.swing.JToggleButton[numToggle];
		toggles[1] = buttonToggleMove;
		toggles[2] = buttonToggleSelect;
		toggles[3] = buttonTogglePaint;
		toggles[4] = buttonToggleScissor;
		selected = new boolean[numToggle];
		selected[0] = true;
		for(int i=1; i<numToggle; ++i) {
			selected[i] = false;
			toggles[i].setSelected(false);
		}
		setButtonsEnabled(false);
	}

	public void setNetBlackboard(NetBlackboard b) {
		board = b;
	}

	public void setDifferenceManager(DifferenceManager diffManager) {
		this.diffManager = diffManager;
	}

	public void setButtonsEnabled(boolean value) {
		this.buttonDelete.setEnabled(value);
		this.buttonDown.setEnabled(value);
		this.buttonRight.setEnabled(value);
		this.buttonLeft.setEnabled(value);
		this.buttonUp.setEnabled(value);
		this.buttonZoomIn.setEnabled(value);
		this.buttonZoomOut.setEnabled(value);
		this.buttonToggleMove.setEnabled(value);
		this.buttonToggleSelect.setEnabled(value);
		this.buttonTogglePaint.setEnabled(value);
		this.buttonToggleScissor.setEnabled(value);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        movePanel = new javax.swing.JPanel();
        buttonUp = new javax.swing.JButton();
        buttonRight = new javax.swing.JButton();
        buttonDown = new javax.swing.JButton();
        buttonLeft = new javax.swing.JButton();
        zoomPanel = new javax.swing.JPanel();
        buttonZoomIn = new javax.swing.JButton();
        buttonZoomOut = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 =  new javax.swing.JTable() {

            @Override
            public java.awt.Component prepareRenderer(javax.swing.table.TableCellRenderer renderer,
                int row, int column) {
                java.awt.Component comp = super.prepareRenderer(renderer, row, column);
                if(column == 0){
                    comp.setForeground(java.awt.Color.GRAY);
                }else if (getModel().isCellEditable(row, column)) {
                    comp.setForeground(java.awt.Color.BLACK);
                } else {
                    comp.setForeground(java.awt.Color.LIGHT_GRAY);
                }
                return comp;
            }
        };
        countsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        undoButton = new javax.swing.JButton();
        redoButton = new javax.swing.JButton();
        buttonToggleSelect = new javax.swing.JToggleButton();
        buttonToggleMove = new javax.swing.JToggleButton();
        buttonTogglePaint = new javax.swing.JToggleButton();
        buttonToggleScissor = new javax.swing.JToggleButton();
        buttonDelete = new javax.swing.JButton();

        setBackground(java.awt.Color.white);
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            @Override
						public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            @Override
						public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                formAncestorResized(evt);
            }
        });

        movePanel.setBackground(java.awt.Color.white);
        movePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        movePanel.setOpaque(false);

        buttonUp.setBackground(java.awt.Color.white);
        buttonUp.setForeground(java.awt.Color.darkGray);
        buttonUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/go-up.png"))); // NOI18N
        buttonUp.setToolTipText("Move up");
        buttonUp.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        buttonUp.setEnabled(false);
        buttonUp.setMaximumSize(new java.awt.Dimension(20, 20));
        buttonUp.setMinimumSize(new java.awt.Dimension(20, 20));
        buttonUp.setPreferredSize(new java.awt.Dimension(22, 22));
        buttonUp.addActionListener(new java.awt.event.ActionListener() {
            @Override
						public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpActionPerformed(evt);
            }
        });

        buttonRight.setBackground(java.awt.Color.white);
        buttonRight.setForeground(java.awt.Color.darkGray);
        buttonRight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/go-next.png"))); // NOI18N
        buttonRight.setToolTipText("Move right");
        buttonRight.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        buttonRight.setEnabled(false);
        buttonRight.setMaximumSize(new java.awt.Dimension(20, 20));
        buttonRight.setMinimumSize(new java.awt.Dimension(20, 20));
        buttonRight.setPreferredSize(new java.awt.Dimension(22, 22));
        buttonRight.addActionListener(new java.awt.event.ActionListener() {
            @Override
						public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRightActionPerformed(evt);
            }
        });

        buttonDown.setBackground(java.awt.Color.white);
        buttonDown.setForeground(java.awt.Color.darkGray);
        buttonDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/go-down.png"))); // NOI18N
        buttonDown.setToolTipText("Move down");
        buttonDown.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        buttonDown.setEnabled(false);
        buttonDown.setMaximumSize(new java.awt.Dimension(20, 20));
        buttonDown.setMinimumSize(new java.awt.Dimension(20, 20));
        buttonDown.setPreferredSize(new java.awt.Dimension(22, 22));
        buttonDown.addActionListener(new java.awt.event.ActionListener() {
            @Override
						public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDownActionPerformed(evt);
            }
        });

        buttonLeft.setBackground(java.awt.Color.white);
        buttonLeft.setForeground(java.awt.Color.darkGray);
        buttonLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/go-previous.png"))); // NOI18N
        buttonLeft.setToolTipText("Move left");
        buttonLeft.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        buttonLeft.setEnabled(false);
        buttonLeft.setMaximumSize(new java.awt.Dimension(20, 20));
        buttonLeft.setMinimumSize(new java.awt.Dimension(20, 20));
        buttonLeft.setPreferredSize(new java.awt.Dimension(22, 22));
        buttonLeft.addActionListener(new java.awt.event.ActionListener() {
            @Override
						public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLeftActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout movePanelLayout = new javax.swing.GroupLayout(movePanel);
        movePanel.setLayout(movePanelLayout);
        movePanelLayout.setHorizontalGroup(
            movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, movePanelLayout.createSequentialGroup()
                .addComponent(buttonLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonDown, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonRight, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        movePanelLayout.setVerticalGroup(
            movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(movePanelLayout.createSequentialGroup()
                .addComponent(buttonUp, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonDown, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(movePanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(buttonLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(movePanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(buttonRight, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        zoomPanel.setBackground(java.awt.Color.white);
        zoomPanel.setOpaque(false);

        buttonZoomIn.setBackground(java.awt.Color.white);
        buttonZoomIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/add.png"))); // NOI18N
        buttonZoomIn.setToolTipText("Zoom in");
        buttonZoomIn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        buttonZoomIn.setEnabled(false);
        buttonZoomIn.setMaximumSize(new java.awt.Dimension(23, 23));
        buttonZoomIn.setMinimumSize(new java.awt.Dimension(23, 23));
        buttonZoomIn.setPreferredSize(new java.awt.Dimension(23, 23));
        buttonZoomIn.addActionListener(new java.awt.event.ActionListener() {
            @Override
						public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonZoomInActionPerformed(evt);
            }
        });

        buttonZoomOut.setBackground(java.awt.Color.white);
        buttonZoomOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/minus.png"))); // NOI18N
        buttonZoomOut.setToolTipText("Zoom out");
        buttonZoomOut.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        buttonZoomOut.setEnabled(false);
        buttonZoomOut.setMaximumSize(new java.awt.Dimension(23, 23));
        buttonZoomOut.setMinimumSize(new java.awt.Dimension(23, 23));
        buttonZoomOut.setPreferredSize(new java.awt.Dimension(23, 23));
        buttonZoomOut.addActionListener(new java.awt.event.ActionListener() {
            @Override
						public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonZoomOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout zoomPanelLayout = new javax.swing.GroupLayout(zoomPanel);
        zoomPanel.setLayout(zoomPanelLayout);
        zoomPanelLayout.setHorizontalGroup(
            zoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, zoomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(zoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buttonZoomOut, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(buttonZoomIn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                .addContainerGap())
        );
        zoomPanelLayout.setVerticalGroup(
            zoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(zoomPanelLayout.createSequentialGroup()
                .addComponent(buttonZoomIn, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                .addGap(8, 8, 8)
                .addComponent(buttonZoomOut, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
        );

        jScrollPane1.setBorder(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Property", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            @Override
						public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setFillsViewportHeight(true);
        jScrollPane1.setViewportView(jTable1);

        countsPanel.setBackground(java.awt.Color.white);
        countsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout countsPanelLayout = new javax.swing.GroupLayout(countsPanel);
        countsPanel.setLayout(countsPanelLayout);
        countsPanelLayout.setHorizontalGroup(
            countsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        countsPanelLayout.setVerticalGroup(
            countsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 177, Short.MAX_VALUE)
        );

        jLabel1.setText("Counts:");

        undoButton.setBackground(java.awt.Color.white);
        undoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/undo.png"))); // NOI18N
        undoButton.setToolTipText("Undo");
        undoButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        undoButton.setContentAreaFilled(false);
        undoButton.setEnabled(false);
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
						public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });

        redoButton.setBackground(java.awt.Color.white);
        redoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/redo.png"))); // NOI18N
        redoButton.setToolTipText("Redo");
        redoButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        redoButton.setContentAreaFilled(false);
        redoButton.setEnabled(false);
        redoButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
						public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoButtonActionPerformed(evt);
            }
        });

        buttonToggleSelect.setBackground(java.awt.Color.white);
        buttonToggleSelect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/select.png"))); // NOI18N
        buttonToggleSelect.setToolTipText("Select");
        buttonToggleSelect.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        buttonToggleSelect.setEnabled(false);
        buttonToggleSelect.addActionListener(new java.awt.event.ActionListener() {
            @Override
						public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonToggleSelectActionPerformed(evt);
            }
        });

        buttonToggleMove.setBackground(java.awt.Color.white);
        buttonToggleMove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/move.png"))); // NOI18N
        buttonToggleMove.setToolTipText("Move");
        buttonToggleMove.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        buttonToggleMove.setEnabled(false);
        buttonToggleMove.addActionListener(new java.awt.event.ActionListener() {
            @Override
						public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonToggleMoveActionPerformed(evt);
            }
        });

        buttonTogglePaint.setBackground(java.awt.Color.white);
        buttonTogglePaint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/draw-freehand.png"))); // NOI18N
        buttonTogglePaint.setToolTipText("Draw");
        buttonTogglePaint.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        buttonTogglePaint.setEnabled(false);
        buttonTogglePaint.addActionListener(new java.awt.event.ActionListener() {
            @Override
						public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTogglePaintActionPerformed(evt);
            }
        });

        buttonToggleScissor.setBackground(java.awt.Color.white);
        buttonToggleScissor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/scissors.png"))); // NOI18N
        buttonToggleScissor.setToolTipText("Divide link");
        buttonToggleScissor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        buttonToggleScissor.setEnabled(false);
        buttonToggleScissor.addActionListener(new java.awt.event.ActionListener() {
            @Override
						public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonToggleScissorActionPerformed(evt);
            }
        });

        buttonDelete.setBackground(java.awt.Color.white);
        buttonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/delete.png"))); // NOI18N
        buttonDelete.setToolTipText("Delete link");
        buttonDelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        buttonDelete.setEnabled(false);
        buttonDelete.setMargin(new java.awt.Insets(2, 2, 2, 2));
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            @Override
						public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(movePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zoomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(undoButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(redoButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonToggleSelect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonToggleMove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonTogglePaint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonToggleScissor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonDelete)
                        .addGap(0, 29, Short.MAX_VALUE))
                    .addComponent(countsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(zoomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(movePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(undoButton)
                    .addComponent(redoButton)
                    .addComponent(buttonToggleSelect)
                    .addComponent(buttonToggleMove)
                    .addComponent(buttonTogglePaint)
                    .addComponent(buttonToggleScissor)
                    .addComponent(buttonDelete))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(countsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addContainerGap())
        );

        countList = new CountList(this);
        countsPanel.add(countList);

        undoButton.getAccessibleContext().setAccessibleName("undoButton");
    }// </editor-fold>//GEN-END:initComponents

	private void buttonUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpActionPerformed
		board.moveViewBox(0, -getHeight()*0.02);
		board.repaint();
	}//GEN-LAST:event_buttonUpActionPerformed

	private void buttonRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRightActionPerformed
		board.moveViewBox(getWidth()*0.02, 0);
		board.repaint();
	}//GEN-LAST:event_buttonRightActionPerformed

	private void buttonDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDownActionPerformed
		board.moveViewBox(0, getHeight()*0.02);
		board.repaint();
	}//GEN-LAST:event_buttonDownActionPerformed

	private void buttonLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLeftActionPerformed
		board.moveViewBox(-getWidth()*0.02, 0);
		board.repaint();
	}//GEN-LAST:event_buttonLeftActionPerformed

	private void buttonZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonZoomInActionPerformed
		board.zoom(0.03);
		board.repaint();
	}//GEN-LAST:event_buttonZoomInActionPerformed

	private void buttonZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonZoomOutActionPerformed
		board.zoom(-0.02);
		board.repaint();
	}//GEN-LAST:event_buttonZoomOutActionPerformed

	private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized
		this.setSize(this.getParent().getSize());
		this.repaint();
	}//GEN-LAST:event_formAncestorResized

	private void buttonTogglePaintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTogglePaintActionPerformed
		checkToggle(3);
	}//GEN-LAST:event_buttonTogglePaintActionPerformed

	private void buttonToggleSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonToggleSelectActionPerformed
		checkToggle(2);
	}//GEN-LAST:event_buttonToggleSelectActionPerformed

	private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
		board.activeLink = null;
		board.activeNode = null;
		diffManager.undo();
		board.updateSelectedLinkList();
		updateButtons();
		updateTable();
		board.repaint();
	}//GEN-LAST:event_undoButtonActionPerformed

	private void redoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoButtonActionPerformed
		board.activeLink = null;
		board.activeNode = null;
		diffManager.redo();
		board.updateSelectedLinkList();
		updateButtons();
		updateTable();
		board.repaint();
	}//GEN-LAST:event_redoButtonActionPerformed

	private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
		// TODO add your handling code here:
		board.deleteActiveLinks();
		updateTable();
	}//GEN-LAST:event_buttonDeleteActionPerformed

	private void buttonToggleMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonToggleMoveActionPerformed
		checkToggle(1);        
	}//GEN-LAST:event_buttonToggleMoveActionPerformed

	private void buttonToggleScissorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonToggleScissorActionPerformed
		checkToggle(4);        
	}//GEN-LAST:event_buttonToggleScissorActionPerformed

	private void checkToggle(int cT) {
		if(selected[cT]==false) {
			setToogle(cT);
		} else {
			selected[cT]=false;
			toggles[cT].setSelected(false);
		}
		updateBoardState();
	}

	private void setToogle(int t) {
		for(int i=0; i<this.numToggle; ++i){
			selected[i] = i==t;
			if(i>0)
				toggles[i].setSelected(i==t);
		}
	}

	private void updateBoardState() {
		NetBlackboard.Mode modes[] = NetBlackboard.Mode.values();
		for(int i=0; i<selected.length; ++i) {
			if(selected[i]==true) {
				board.setMode(modes[i]);
				break;
			}
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonDown;
    private javax.swing.JButton buttonLeft;
    private javax.swing.JButton buttonRight;
    private javax.swing.JToggleButton buttonToggleMove;
    private javax.swing.JToggleButton buttonTogglePaint;
    private javax.swing.JToggleButton buttonToggleScissor;
    private javax.swing.JToggleButton buttonToggleSelect;
    private javax.swing.JButton buttonUp;
    private javax.swing.JButton buttonZoomIn;
    private javax.swing.JButton buttonZoomOut;
    private javax.swing.JPanel countsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel movePanel;
    private javax.swing.JButton redoButton;
    private javax.swing.JButton undoButton;
    private javax.swing.JPanel zoomPanel;
    // End of variables declaration//GEN-END:variables


	/*public Component getTableCellRendererComponent(
        JTable table, Object value, boolean isSelected,
        boolean hasFocus, int row, int col) {
        Component comp = super.getTableCellRendererComponent(
                      table,  value, isSelected, hasFocus, row, col);
        String s =  table.getModel().getValueAt(row, VALIDATION_COLUMN ).toString();
         if(s.equalsIgnoreCase("Fail")) {
            comp.setForeground(Color.red);
        } else {
            comp.setForeground(null);
        }
        return( comp );
    }*/

	public void updateTable() {
		tableModel = new MyTableModel();
		if(board.activeLink != null) tableModel = new MyTableModel(board.activeLink);
		if(board.activeNode != null) tableModel = new MyTableModel(board.activeNode);
		jTable1.setModel(tableModel);
		jTable1.setVisible(true);
		jTable1.getModel().addTableModelListener(new MyTableModelListener(this));
		//jTable1.pre
		jTable1.repaint();
		this.countList.updateTable();
	}

	public void updateButtons() {
		if(board.diffManager.getBackSize() < 1)
			this.undoButton.setEnabled(false);
		else
			this.undoButton.setEnabled(true);
		if(board.diffManager.getFrontSize() < 1)
			this.redoButton.setEnabled(false);
		else
			this.redoButton.setEnabled(true);
	}

}

class MyTableModel extends AbstractTableModel {
	private String table[][];
	private String columnName[];
	private boolean editable[][];
	private int rows, cols;
	public enum mode{LINK, NODE, NONE};
	mode actualMode;
	public Link activeLink;
	public Node activeNode;

	public MyTableModel(){
		rows = cols = 0;
		actualMode = mode.NONE;
	}

	public MyTableModel(Link activeLink) {
		this.activeLink = activeLink;
		init(10, 2);
		actualMode = mode.LINK;

		table[0][0] = "Capacity";
		table[0][1] = Double.toString(activeLink.getCapacity());
		editable[0][1] = true;

		table[1][0] = "Euklidean length";
		table[1][1] = Double.toString(CoordUtils.calcEuclideanDistance(activeLink.getFromNode().getCoord(), activeLink.getToNode().getCoord()));

		table[2][0] = "Flow capacity / sec";
		table[2][1] = Double.toString(activeLink.getFlowCapacityPerSec());
		//editable[2][1] = true;

		table[3][0] = "Free speed";
		table[3][1] = Double.toString(activeLink.getFreespeed());
		editable[3][1] = true;

		table[4][0] = "Free speed travel time";
		table[4][1] = Double.toString(NetworkUtils.getFreespeedTravelTime(activeLink));
		//editable[4][1] = true;

		table[5][0] = "Length";
		table[5][1] = Double.toString(activeLink.getLength());
		editable[5][1] = true;

		table[6][0] = "Number of lanes";
		table[6][1] = Double.toString(activeLink.getNumberOfLanes());
		editable[6][1] = true;

		table[7][0] = "From node";
		table[7][1] = activeLink.getFromNode().getId().toString();

		table[8][0] = "To node";
		table[8][1] = activeLink.getToNode().getId().toString();

		table[9][0] = "Id";
		table[9][1] = activeLink.getId().toString();

	}

	public MyTableModel(Node activeNode) {
		init(3,2);
		this.activeNode = activeNode;
		actualMode = mode.NODE;

		table[0][0] = "Id";
		table[0][1] = activeNode.getId().toString();
		table[1][0] = "X";
		table[1][1] = Double.toString(activeNode.getCoord().getX());
		table[2][0] = "Y";
		table[2][1] = Double.toString(activeNode.getCoord().getY());
	}

	private void init(int r, int c) {
		table = new String[r][c];
		editable = new boolean[r][c];
		for(int i=0; i<editable.length; ++i) for(int j=0; j<editable[i].length; ++j) editable[i][j] = false;
		columnName = new String[c];
		columnName[0] = "Property";
		columnName[1] = "Value";
		rows = r;
		cols = c;
	}

	/**
	 * Returns the number of rows in the model. A
	 * <code>JTable</code> uses this method to determine how many rows it
	 * should display.  This method should be quick, as it
	 * is called frequently during rendering.
	 *
	 * @return the number of rows in the model
	 * @see #getColumnCount
	 */
	@Override
	public int getRowCount(){
		return rows;
	}

	/**
	 * Returns the number of columns in the model. A
	 * <code>JTable</code> uses this method to determine how many columns it
	 * should create and display by default.
	 *
	 * @return the number of columns in the model
	 * @see #getRowCount
	 */
	@Override
	public int getColumnCount() {
		return cols;
	}

	/**
	 * Returns the name of the column at <code>columnIndex</code>.  This is used
	 * to initialize the table's column header name.  Note: this name does
	 * not need to be unique; two columns in a table can have the same name.
	 *
	 * @param	columnIndex	the index of the column
	 * @return  the name of the column
	 */
	@Override
	public String getColumnName(int columnIndex) {
		return columnName[columnIndex];
	}

	/**
	 * Returns the most specific superclass for all the cell values 
	 * in the column.  This is used by the <code>JTable</code> to set up a 
	 * default renderer and editor for the column.
	 *
	 * @param columnIndex  the index of the column
	 * @return the common ancestor class of the object values in the model.
	 */
	@Override
	public Class<?> getColumnClass(int columnIndex) {
		return this.getValueAt(0, columnIndex).getClass();
	}

	/**
	 * Returns true if the cell at <code>rowIndex</code> and
	 * <code>columnIndex</code>
	 * is editable.  Otherwise, <code>setValueAt</code> on the cell will not
	 * change the value of that cell.
	 *
	 * @param	rowIndex	the row whose value to be queried
	 * @param	columnIndex	the column whose value to be queried
	 * @return	true if the cell is editable
	 * @see #setValueAt
	 */
	@Override
	public boolean isCellEditable(int rowIndex, int columnIndex) {
		return editable[rowIndex][columnIndex];
	}

	/**
	 * Returns the value for the cell at <code>columnIndex</code> and
	 * <code>rowIndex</code>.
	 *
	 * @param	rowIndex	the row whose value is to be queried
	 * @param	columnIndex 	the column whose value is to be queried
	 * @return	the value Object at the specified cell
	 */
	@Override
	public Object getValueAt(int rowIndex, int columnIndex) {
		return table[rowIndex][columnIndex];
	}

	/**
	 * Sets the value in the cell at <code>columnIndex</code> and
	 * <code>rowIndex</code> to <code>aValue</code>.
	 *
	 * @param	aValue		 the new value
	 * @param	rowIndex	 the row whose value is to be changed
	 * @param	columnIndex 	 the column whose value is to be changed
	 * @see #getValueAt
	 * @see #isCellEditable
	 */
	@Override
	public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
		table[rowIndex][columnIndex] = aValue.toString();
		fireTableCellUpdated(rowIndex, columnIndex);
	}

}

class MyTableModelListener implements TableModelListener {
	public NetControls controls;

	MyTableModelListener(NetControls c) {
		controls = c;
	}

	@Override
	public void tableChanged(TableModelEvent evt) {
		MyTableModel tableModel = (MyTableModel)evt.getSource();
		//System.out.println("FUCK THIS!");
		if (evt.getType() == TableModelEvent.UPDATE) {
			int column = evt.getColumn();
			int row = evt.getFirstRow();
			//System.out.println("row: " + row + " column: " + column);
			if(tableModel.actualMode == MyTableModel.mode.NONE) return;
			if(tableModel.actualMode == MyTableModel.mode.NODE) return;
			if(tableModel.actualMode == MyTableModel.mode.LINK){
				if(tableModel.isCellEditable(row, column)== false) return;
				String rawdata = (String)tableModel.getValueAt(row, column);
				double data = 0.0;
				try {
					data = Double.parseDouble(rawdata);
				} catch (Exception e) {
					javax.swing.JOptionPane.showMessageDialog(controls, "Los valores deben ser numéricos", "Error de formato", javax.swing.JOptionPane.WARNING_MESSAGE);
					controls.updateTable();
					//e.printStackTrace();
					return;
				}
				controls.diffManager.saveState(controls.diffManager.cloneLink(tableModel.activeLink), DifferenceManager.type.EDIT, null, null, null, null, null, null, null, null);
				if(row == 0) {
					tableModel.activeLink.setCapacity(data);
					controls.board.setMinMaxCaps();
				} else if(row == 3)
					tableModel.activeLink.setFreespeed(data);
				else if(row == 5)
					tableModel.activeLink.setLength(data);
				else if(row == 6)
					tableModel.activeLink.setNumberOfLanes(data);
				controls.updateTable();
				controls.updateButtons();
			}
		}
	}
}
