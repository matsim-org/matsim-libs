<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE config SYSTEM "http://www.matsim.org/files/dtd/config_v1.dtd" [
	<!ENTITY outputName "equil" >
	<!ENTITY cliques "test/input/org/matsim/contrib/socnetsim/cliques.xml" >
	<!ENTITY plans "test/input/org/matsim/contrib/socnetsim/plans.xml" >
	<!ENTITY network "test/input/org/matsim/contrib/socnetsim/network.xml" >
]>
<config>

<!-- ====================================================================== -->

	<module name="Cliques" >
		<param name="inputCliquesFile" value="&cliques;" />
	</module>

<!-- ====================================================================== -->

	<module name="qsim" >
		<param name="flowCapacityFactor" value="0.05" />
		<param name="storageCapacityFactor" value="1" />
		<param name="mainMode" value="car,simulatedCarDriver" />
		<param name="endTime" value="30:00:00" />
	</module>

<!-- ====================================================================== -->

	<module name="controler" >
		<param name="enableLinkToLinkRouting" value="false" />

		<!-- Specifies the file format for writing events. Currently supported: txt, xml. Multiple values can be specified separated by commas (','). -->
		<param name="eventsFileFormat" value="xml" />
		<param name="firstIteration" value="0" />
		<param name="lastIteration" value="150" />

		<param name="mobsim" value="qsim" />
		<param name="outputDirectory" value="./output/&outputName;" />

		<!-- The type of routing (least cost path) algorithm used, may have the values: Dijkstra, AStarLandmarks or SpeedyALT -->
		<param name="routingAlgorithmType" value="Dijkstra" />

		<!-- An identifier for the current run which is used as prefix for output files and mentioned in output xml files etc. -->
		<param name="runId" value="null" />

		<!-- Comma-separated list of visualizer output file formats. `transims', `googleearth', and `otfvis'. -->
		<param name="snapshotFormat" value="" />

		<!-- iterationNumber % writeEventsInterval == 0 defines in which iterations events are written to a file. `0' disables events writing completely. -->
		<param name="writeEventsInterval" value="1" />

		<!-- iterationNumber % writePlansInterval == 0 defines (hopefully) in which iterations plans are written to a file. `0' disables plans writing completely.  Some plans in early iterations are always written -->
		<param name="writePlansInterval" value="1" />
	</module>

<!-- ====================================================================== -->

	<module name="global" >
		<param name="coordinateSystem" value="Atlantis" />
		<param name="numberOfThreads" value="10" />
		<param name="randomSeed" value="4711" />
	</module>

<!-- ====================================================================== -->

	<module name="network" >
		<param name="inputChangeEventsFile" value="null" />
		<param name="inputNetworkFile" value="&network;" />
		<param name="laneDefinitionsFile" value="null" />
		<param name="timeVariantNetwork" value="false" />
	</module>

<!-- ====================================================================== -->

	<module name="planCalcScore" >

		<!-- [1/utils] conversion factor of utility model for use in logit-based choice model.  Set to 1 if your utl function is estimated -->
		<param name="BrainExpBeta" value="0.0" />
		<param name="PathSizeLogitBeta" value="1.0" />
		<param name="activityClosingTime_0" value="undefined" />
		<param name="activityClosingTime_1" value="18:00:00" />
		<param name="activityClosingTime_2" value="00:00:01" />
		<param name="activityClosingTime_3" value="00:00:01" />
		<param name="activityEarliestEndTime_0" value="undefined" />
		<param name="activityEarliestEndTime_1" value="undefined" />
		<param name="activityEarliestEndTime_2" value="00:00:01" />
		<param name="activityEarliestEndTime_3" value="00:00:01" />
		<param name="activityLatestStartTime_0" value="undefined" />
		<param name="activityLatestStartTime_1" value="09:00:00" />
		<param name="activityLatestStartTime_2" value="24:00:00" />
		<param name="activityLatestStartTime_3" value="24:00:00" />
		<param name="activityMinimalDuration_0" value="08:00:00" />
		<param name="activityMinimalDuration_1" value="06:00:00" />
		<param name="activityMinimalDuration_2" value="00:00:00" />
		<param name="activityMinimalDuration_3" value="00:00:00" />
		<param name="activityOpeningTime_0" value="undefined" />
		<param name="activityOpeningTime_1" value="07:00:00" />
		<param name="activityOpeningTime_2" value="00:00:00" />
		<param name="activityOpeningTime_3" value="00:00:00" />
		<param name="activityPriority_0" value="1.0" />
		<param name="activityPriority_1" value="1.0" />
		<param name="activityPriority_2" value="1.0" />
		<param name="activityPriority_3" value="1.0" />
		<param name="activityType_0" value="h" />
		<param name="activityType_1" value="w" />
		<param name="activityType_2" value="pick_up" />
		<param name="activityType_3" value="drop_off" />
		<param name="activityTypicalDuration_0" value="12:00:00" />
		<param name="activityTypicalDuration_1" value="08:00:00" />
		<param name="activityTypicalDuration_2" value="00:01:00" />
		<param name="activityTypicalDuration_3" value="00:01:00" />

		<!-- [utils] alternative-specific constant for bike.  no guarantee that this is used anywhere. default=0 to be backwards compatible for the time being -->
		<param name="constantBike" value="0.0" />

		<!-- [utils] alternative-specific constant for car.  no guarantee that this is used anywhere. default=0 to be backwards compatible for the time being -->
		<param name="constantCar" value="0.0" />

		<!-- [utils] alternative-specific constant for pt.  no guarantee that this is used anywhere. default=0 to be backwards compatible for the time being -->
		<param name="constantPt" value="0.0" />

		<!-- [utils] alternative-specific constant for walk.  no guarantee that this is used anywhere. default=0 to be backwards compatible for the time being -->
		<param name="constantWalk" value="0.0" />

		<!-- [utils/hr] utility for departing early (i.e. before the earliest end time).  Probably implemented correctly, but not tested. -->
		<param name="earlyDeparture" value="-0.0" />

		<!-- [utils/hr] utility for arriving late (i.e. after the latest start time).  normally negative -->
		<param name="lateArrival" value="-18.0" />

		<!-- new_score = (1-learningRate)*old_score + learningRate * score_from_mobsim.  learning rates close to zero emulate score averaging, but slow down initial convergence -->
		<param name="learningRate" value="1.0" />

		<!-- [utils/unit_of_money] conversion of money (e.g. toll, distance cost) into utils -->
		<param name="marginalUtilityOfMoney" value="1.0" />

		<!-- DISCOURAGED! [utils/m] utility of walking per m, normally negative.  this is on top of the time (dis)utility.  It is discouraged to use this but in some cases it may make sense. -->
		<param name="marginalUtlOfDistanceWalk" value="0.0" />

		<!-- [unit_of_money/m] conversion of car distance into money -->
		<param name="monetaryDistanceRateCar" value="0.0" />

		<!-- [unit_of_money/m] conversion of pt distance into money -->
		<param name="monetaryDistanceRatePt" value="0.0" />

		<!-- [utils/hr] marginal utility of doing an activity.  normally positive.  also the opportunity cost of time if agent is doing nothing. -->
		<param name="performing" value="6.0" />

		<!-- [utils/hr] additional marginal utility of traveling by car.  normally negative.  this comes on top of the opportunity cost of time -->
		<param name="traveling" value="-6.0" />
		<param name="travelingBike" value="-6.0" />

		<!-- [utils/hr] additional marginal utility offset of traveling by pt.  normally negative.  this comes on top of the opportunity cost of time -->
		<param name="travelingPt" value="-6.0" />

		<!-- [utils/hr] additional marginal utility offset of traveling by foot.  normally negative.  this comes on top of the opportunity cost of time.  also see marginalUtlOfDistanceWalk -->
		<param name="travelingWalk" value="-6.0" />

		<!-- [utils] utility of switching a line (= transfer penalty).  Normally negative -->
		<param name="utilityOfLineSwitch" value="-1.0" />

		<!-- [utils/hr] utility offset for waiting.  this comes on top of the opportunity cost of time.  Probably implemented correctly, but not tested. -->
		<param name="waiting" value="-0.0" />
	</module>

<!-- ====================================================================== -->

	<module name="plans" >
		<!--
		<param name="inputPlansFile" value="testcases/matings/3-10-bothPopulation.xml.gz" />
		-->
		<param name="inputPlansFile" value="&plans;" />
	</module>

<!-- ====================================================================== -->

	<module name="planscalcroute" >

		<!-- factor with which beeline distances (and therefore times) are multiplied in order to obtain an estimate of the network distances/times.  Default is something like 1.3 -->
		<param name="beelineDistanceFactor" value="1.3" />

		<!-- All the modes for which the router is supposed to generate network routes (like car) -->
		<param name="networkModes" value="car,ride" />

		<param name="teleportedModeSpeed_pt" value="6.944444444444445" />

		<!-- Speed for a teleported mode based on beeline-distance: (<beeline distance> * beelineDistanceFactor) / speed. Insert a line like this for every such mode. -->
		<param name="teleportedModeSpeed_bike" value="4.166666666666667" />

		<!-- Speed for a teleported mode based on beeline-distance: (<beeline distance> * beelineDistanceFactor) / speed. Insert a line like this for every such mode. -->
		<param name="teleportedModeSpeed_undefined" value="13.88888888888889" />

		<!-- Speed for a teleported mode based on beeline-distance: (<beeline distance> * beelineDistanceFactor) / speed. Insert a line like this for every such mode. -->
		<param name="teleportedModeSpeed_walk" value="0.8333333333333333" />
	</module>

<!-- ====================================================================== -->
</config>
