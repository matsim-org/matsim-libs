/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.matsim.application.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class XYTData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7545707257116531193L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"XYTData\",\"namespace\":\"org.matsim.application.avro\",\"fields\":[{\"name\":\"crs\",\"type\":\"string\",\"doc\":\"Coordinate reference system\"},{\"name\":\"xCoords\",\"type\":{\"type\":\"array\",\"items\":\"float\"},\"doc\":\"List of x coordinates\"},{\"name\":\"yCoords\",\"type\":{\"type\":\"array\",\"items\":\"float\"},\"doc\":\"List of y coordinates\"},{\"name\":\"timestamps\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"doc\":\"List of timestamps in seconds\"},{\"name\":\"data\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":\"float\"}},\"doc\":\"XYT data for each dataset. The key is the name, the data is stored in one chunk of data.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<XYTData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<XYTData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<XYTData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<XYTData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<XYTData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this XYTData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a XYTData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a XYTData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static XYTData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Coordinate reference system */
  private java.lang.CharSequence crs;
  /** List of x coordinates */
  private java.util.List<java.lang.Float> xCoords;
  /** List of y coordinates */
  private java.util.List<java.lang.Float> yCoords;
  /** List of timestamps in seconds */
  private java.util.List<java.lang.Integer> timestamps;
  /** XYT data for each dataset. The key is the name, the data is stored in one chunk of data. */
  private java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Float>> data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public XYTData() {}

  /**
   * All-args constructor.
   * @param crs Coordinate reference system
   * @param xCoords List of x coordinates
   * @param yCoords List of y coordinates
   * @param timestamps List of timestamps in seconds
   * @param data XYT data for each dataset. The key is the name, the data is stored in one chunk of data.
   */
  public XYTData(java.lang.CharSequence crs, java.util.List<java.lang.Float> xCoords, java.util.List<java.lang.Float> yCoords, java.util.List<java.lang.Integer> timestamps, java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Float>> data) {
    this.crs = crs;
    this.xCoords = xCoords;
    this.yCoords = yCoords;
    this.timestamps = timestamps;
    this.data = data;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return crs;
    case 1: return xCoords;
    case 2: return yCoords;
    case 3: return timestamps;
    case 4: return data;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: crs = (java.lang.CharSequence)value$; break;
    case 1: xCoords = (java.util.List<java.lang.Float>)value$; break;
    case 2: yCoords = (java.util.List<java.lang.Float>)value$; break;
    case 3: timestamps = (java.util.List<java.lang.Integer>)value$; break;
    case 4: data = (java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Float>>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'crs' field.
   * @return Coordinate reference system
   */
  public java.lang.CharSequence getCrs() {
    return crs;
  }


  /**
   * Sets the value of the 'crs' field.
   * Coordinate reference system
   * @param value the value to set.
   */
  public void setCrs(java.lang.CharSequence value) {
    this.crs = value;
  }

  /**
   * Gets the value of the 'xCoords' field.
   * @return List of x coordinates
   */
  public java.util.List<java.lang.Float> getXCoords() {
    return xCoords;
  }


  /**
   * Sets the value of the 'xCoords' field.
   * List of x coordinates
   * @param value the value to set.
   */
  public void setXCoords(java.util.List<java.lang.Float> value) {
    this.xCoords = value;
  }

  /**
   * Gets the value of the 'yCoords' field.
   * @return List of y coordinates
   */
  public java.util.List<java.lang.Float> getYCoords() {
    return yCoords;
  }


  /**
   * Sets the value of the 'yCoords' field.
   * List of y coordinates
   * @param value the value to set.
   */
  public void setYCoords(java.util.List<java.lang.Float> value) {
    this.yCoords = value;
  }

  /**
   * Gets the value of the 'timestamps' field.
   * @return List of timestamps in seconds
   */
  public java.util.List<java.lang.Integer> getTimestamps() {
    return timestamps;
  }


  /**
   * Sets the value of the 'timestamps' field.
   * List of timestamps in seconds
   * @param value the value to set.
   */
  public void setTimestamps(java.util.List<java.lang.Integer> value) {
    this.timestamps = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return XYT data for each dataset. The key is the name, the data is stored in one chunk of data.
   */
  public java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Float>> getData() {
    return data;
  }


  /**
   * Sets the value of the 'data' field.
   * XYT data for each dataset. The key is the name, the data is stored in one chunk of data.
   * @param value the value to set.
   */
  public void setData(java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Float>> value) {
    this.data = value;
  }

  /**
   * Creates a new XYTData RecordBuilder.
   * @return A new XYTData RecordBuilder
   */
  public static org.matsim.application.avro.XYTData.Builder newBuilder() {
    return new org.matsim.application.avro.XYTData.Builder();
  }

  /**
   * Creates a new XYTData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new XYTData RecordBuilder
   */
  public static org.matsim.application.avro.XYTData.Builder newBuilder(org.matsim.application.avro.XYTData.Builder other) {
    if (other == null) {
      return new org.matsim.application.avro.XYTData.Builder();
    } else {
      return new org.matsim.application.avro.XYTData.Builder(other);
    }
  }

  /**
   * Creates a new XYTData RecordBuilder by copying an existing XYTData instance.
   * @param other The existing instance to copy.
   * @return A new XYTData RecordBuilder
   */
  public static org.matsim.application.avro.XYTData.Builder newBuilder(org.matsim.application.avro.XYTData other) {
    if (other == null) {
      return new org.matsim.application.avro.XYTData.Builder();
    } else {
      return new org.matsim.application.avro.XYTData.Builder(other);
    }
  }

  /**
   * RecordBuilder for XYTData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<XYTData>
    implements org.apache.avro.data.RecordBuilder<XYTData> {

    /** Coordinate reference system */
    private java.lang.CharSequence crs;
    /** List of x coordinates */
    private java.util.List<java.lang.Float> xCoords;
    /** List of y coordinates */
    private java.util.List<java.lang.Float> yCoords;
    /** List of timestamps in seconds */
    private java.util.List<java.lang.Integer> timestamps;
    /** XYT data for each dataset. The key is the name, the data is stored in one chunk of data. */
    private java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Float>> data;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.matsim.application.avro.XYTData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.crs)) {
        this.crs = data().deepCopy(fields()[0].schema(), other.crs);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.xCoords)) {
        this.xCoords = data().deepCopy(fields()[1].schema(), other.xCoords);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.yCoords)) {
        this.yCoords = data().deepCopy(fields()[2].schema(), other.yCoords);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timestamps)) {
        this.timestamps = data().deepCopy(fields()[3].schema(), other.timestamps);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.data)) {
        this.data = data().deepCopy(fields()[4].schema(), other.data);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing XYTData instance
     * @param other The existing instance to copy.
     */
    private Builder(org.matsim.application.avro.XYTData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.crs)) {
        this.crs = data().deepCopy(fields()[0].schema(), other.crs);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.xCoords)) {
        this.xCoords = data().deepCopy(fields()[1].schema(), other.xCoords);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.yCoords)) {
        this.yCoords = data().deepCopy(fields()[2].schema(), other.yCoords);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamps)) {
        this.timestamps = data().deepCopy(fields()[3].schema(), other.timestamps);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.data)) {
        this.data = data().deepCopy(fields()[4].schema(), other.data);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'crs' field.
      * Coordinate reference system
      * @return The value.
      */
    public java.lang.CharSequence getCrs() {
      return crs;
    }


    /**
      * Sets the value of the 'crs' field.
      * Coordinate reference system
      * @param value The value of 'crs'.
      * @return This builder.
      */
    public org.matsim.application.avro.XYTData.Builder setCrs(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.crs = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'crs' field has been set.
      * Coordinate reference system
      * @return True if the 'crs' field has been set, false otherwise.
      */
    public boolean hasCrs() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'crs' field.
      * Coordinate reference system
      * @return This builder.
      */
    public org.matsim.application.avro.XYTData.Builder clearCrs() {
      crs = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'xCoords' field.
      * List of x coordinates
      * @return The value.
      */
    public java.util.List<java.lang.Float> getXCoords() {
      return xCoords;
    }


    /**
      * Sets the value of the 'xCoords' field.
      * List of x coordinates
      * @param value The value of 'xCoords'.
      * @return This builder.
      */
    public org.matsim.application.avro.XYTData.Builder setXCoords(java.util.List<java.lang.Float> value) {
      validate(fields()[1], value);
      this.xCoords = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'xCoords' field has been set.
      * List of x coordinates
      * @return True if the 'xCoords' field has been set, false otherwise.
      */
    public boolean hasXCoords() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'xCoords' field.
      * List of x coordinates
      * @return This builder.
      */
    public org.matsim.application.avro.XYTData.Builder clearXCoords() {
      xCoords = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'yCoords' field.
      * List of y coordinates
      * @return The value.
      */
    public java.util.List<java.lang.Float> getYCoords() {
      return yCoords;
    }


    /**
      * Sets the value of the 'yCoords' field.
      * List of y coordinates
      * @param value The value of 'yCoords'.
      * @return This builder.
      */
    public org.matsim.application.avro.XYTData.Builder setYCoords(java.util.List<java.lang.Float> value) {
      validate(fields()[2], value);
      this.yCoords = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'yCoords' field has been set.
      * List of y coordinates
      * @return True if the 'yCoords' field has been set, false otherwise.
      */
    public boolean hasYCoords() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'yCoords' field.
      * List of y coordinates
      * @return This builder.
      */
    public org.matsim.application.avro.XYTData.Builder clearYCoords() {
      yCoords = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamps' field.
      * List of timestamps in seconds
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getTimestamps() {
      return timestamps;
    }


    /**
      * Sets the value of the 'timestamps' field.
      * List of timestamps in seconds
      * @param value The value of 'timestamps'.
      * @return This builder.
      */
    public org.matsim.application.avro.XYTData.Builder setTimestamps(java.util.List<java.lang.Integer> value) {
      validate(fields()[3], value);
      this.timestamps = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamps' field has been set.
      * List of timestamps in seconds
      * @return True if the 'timestamps' field has been set, false otherwise.
      */
    public boolean hasTimestamps() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamps' field.
      * List of timestamps in seconds
      * @return This builder.
      */
    public org.matsim.application.avro.XYTData.Builder clearTimestamps() {
      timestamps = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * XYT data for each dataset. The key is the name, the data is stored in one chunk of data.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Float>> getData() {
      return data;
    }


    /**
      * Sets the value of the 'data' field.
      * XYT data for each dataset. The key is the name, the data is stored in one chunk of data.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public org.matsim.application.avro.XYTData.Builder setData(java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Float>> value) {
      validate(fields()[4], value);
      this.data = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * XYT data for each dataset. The key is the name, the data is stored in one chunk of data.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'data' field.
      * XYT data for each dataset. The key is the name, the data is stored in one chunk of data.
      * @return This builder.
      */
    public org.matsim.application.avro.XYTData.Builder clearData() {
      data = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public XYTData build() {
      try {
        XYTData record = new XYTData();
        record.crs = fieldSetFlags()[0] ? this.crs : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.xCoords = fieldSetFlags()[1] ? this.xCoords : (java.util.List<java.lang.Float>) defaultValue(fields()[1]);
        record.yCoords = fieldSetFlags()[2] ? this.yCoords : (java.util.List<java.lang.Float>) defaultValue(fields()[2]);
        record.timestamps = fieldSetFlags()[3] ? this.timestamps : (java.util.List<java.lang.Integer>) defaultValue(fields()[3]);
        record.data = fieldSetFlags()[4] ? this.data : (java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Float>>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<XYTData>
    WRITER$ = (org.apache.avro.io.DatumWriter<XYTData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<XYTData>
    READER$ = (org.apache.avro.io.DatumReader<XYTData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.crs);

    long size0 = this.xCoords.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.Float e0: this.xCoords) {
      actualSize0++;
      out.startItem();
      out.writeFloat(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.yCoords.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.Float e1: this.yCoords) {
      actualSize1++;
      out.startItem();
      out.writeFloat(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.timestamps.size();
    out.writeArrayStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (java.lang.Integer e2: this.timestamps) {
      actualSize2++;
      out.startItem();
      out.writeInt(e2);
    }
    out.writeArrayEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

    long size3 = this.data.size();
    out.writeMapStart();
    out.setItemCount(size3);
    long actualSize3 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.util.List<java.lang.Float>> e3: this.data.entrySet()) {
      actualSize3++;
      out.startItem();
      out.writeString(e3.getKey());
      java.util.List<java.lang.Float> v3 = e3.getValue();
      long size4 = v3.size();
      out.writeArrayStart();
      out.setItemCount(size4);
      long actualSize4 = 0;
      for (java.lang.Float e4: v3) {
        actualSize4++;
        out.startItem();
        out.writeFloat(e4);
      }
      out.writeArrayEnd();
      if (actualSize4 != size4)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");
    }
    out.writeMapEnd();
    if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size3 + ", but element count was " + actualSize3 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.crs = in.readString(this.crs instanceof Utf8 ? (Utf8)this.crs : null);

      long size0 = in.readArrayStart();
      java.util.List<java.lang.Float> a0 = this.xCoords;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.Float>((int)size0, SCHEMA$.getField("xCoords").schema());
        this.xCoords = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.Float> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.Float e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readFloat();
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.lang.Float> a1 = this.yCoords;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.Float>((int)size1, SCHEMA$.getField("yCoords").schema());
        this.yCoords = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.Float> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.Float e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readFloat();
          a1.add(e1);
        }
      }

      long size2 = in.readArrayStart();
      java.util.List<java.lang.Integer> a2 = this.timestamps;
      if (a2 == null) {
        a2 = new SpecificData.Array<java.lang.Integer>((int)size2, SCHEMA$.getField("timestamps").schema());
        this.timestamps = a2;
      } else a2.clear();
      SpecificData.Array<java.lang.Integer> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a2 : null);
      for ( ; 0 < size2; size2 = in.arrayNext()) {
        for ( ; size2 != 0; size2--) {
          java.lang.Integer e2 = (ga2 != null ? ga2.peek() : null);
          e2 = in.readInt();
          a2.add(e2);
        }
      }

      long size3 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Float>> m3 = this.data; // Need fresh name due to limitation of macro system
      if (m3 == null) {
        m3 = new java.util.HashMap<java.lang.CharSequence,java.util.List<java.lang.Float>>((int)size3);
        this.data = m3;
      } else m3.clear();
      for ( ; 0 < size3; size3 = in.mapNext()) {
        for ( ; size3 != 0; size3--) {
          java.lang.CharSequence k3 = null;
          k3 = in.readString(k3 instanceof Utf8 ? (Utf8)k3 : null);
          java.util.List<java.lang.Float> v3 = null;
          long size4 = in.readArrayStart();
          java.util.List<java.lang.Float> a4 = v3;
          if (a4 == null) {
            a4 = new SpecificData.Array<java.lang.Float>((int)size4, SCHEMA$.getField("data").schema().getValueType());
            v3 = a4;
          } else a4.clear();
          SpecificData.Array<java.lang.Float> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a4 : null);
          for ( ; 0 < size4; size4 = in.arrayNext()) {
            for ( ; size4 != 0; size4--) {
              java.lang.Float e4 = (ga4 != null ? ga4.peek() : null);
              e4 = in.readFloat();
              a4.add(e4);
            }
          }
          m3.put(k3, v3);
        }
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.crs = in.readString(this.crs instanceof Utf8 ? (Utf8)this.crs : null);
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.Float> a0 = this.xCoords;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.Float>((int)size0, SCHEMA$.getField("xCoords").schema());
            this.xCoords = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.Float> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.Float e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readFloat();
              a0.add(e0);
            }
          }
          break;

        case 2:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.Float> a1 = this.yCoords;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.Float>((int)size1, SCHEMA$.getField("yCoords").schema());
            this.yCoords = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.Float> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.Float e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readFloat();
              a1.add(e1);
            }
          }
          break;

        case 3:
          long size2 = in.readArrayStart();
          java.util.List<java.lang.Integer> a2 = this.timestamps;
          if (a2 == null) {
            a2 = new SpecificData.Array<java.lang.Integer>((int)size2, SCHEMA$.getField("timestamps").schema());
            this.timestamps = a2;
          } else a2.clear();
          SpecificData.Array<java.lang.Integer> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              java.lang.Integer e2 = (ga2 != null ? ga2.peek() : null);
              e2 = in.readInt();
              a2.add(e2);
            }
          }
          break;

        case 4:
          long size3 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Float>> m3 = this.data; // Need fresh name due to limitation of macro system
          if (m3 == null) {
            m3 = new java.util.HashMap<java.lang.CharSequence,java.util.List<java.lang.Float>>((int)size3);
            this.data = m3;
          } else m3.clear();
          for ( ; 0 < size3; size3 = in.mapNext()) {
            for ( ; size3 != 0; size3--) {
              java.lang.CharSequence k3 = null;
              k3 = in.readString(k3 instanceof Utf8 ? (Utf8)k3 : null);
              java.util.List<java.lang.Float> v3 = null;
              long size4 = in.readArrayStart();
              java.util.List<java.lang.Float> a4 = v3;
              if (a4 == null) {
                a4 = new SpecificData.Array<java.lang.Float>((int)size4, SCHEMA$.getField("data").schema().getValueType());
                v3 = a4;
              } else a4.clear();
              SpecificData.Array<java.lang.Float> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a4 : null);
              for ( ; 0 < size4; size4 = in.arrayNext()) {
                for ( ; size4 != 0; size4--) {
                  java.lang.Float e4 = (ga4 != null ? ga4.peek() : null);
                  e4 = in.readFloat();
                  a4.add(e4);
                }
              }
              m3.put(k3, v3);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










