/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.matsim.application.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroNetwork extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6654515155450649691L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroNetwork\",\"namespace\":\"org.matsim.application.avro\",\"fields\":[{\"name\":\"crs\",\"type\":\"string\",\"doc\":\"Coordinate reference system\"},{\"name\":\"nodeAttributes\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"linkAttributes\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"nodeId\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"nodeCoordinates\",\"type\":{\"type\":\"array\",\"items\":\"float\"}},{\"name\":\"linkId\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"from\",\"type\":{\"type\":\"array\",\"items\":\"int\"}},{\"name\":\"to\",\"type\":{\"type\":\"array\",\"items\":\"int\"}},{\"name\":\"modes\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"length\",\"type\":{\"type\":\"array\",\"items\":\"float\"}},{\"name\":\"freespeed\",\"type\":{\"type\":\"array\",\"items\":\"float\"}},{\"name\":\"capacity\",\"type\":{\"type\":\"array\",\"items\":\"float\"}},{\"name\":\"permlanes\",\"type\":{\"type\":\"array\",\"items\":\"float\"}},{\"name\":\"allowedModes\",\"type\":{\"type\":\"array\",\"items\":\"int\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroNetwork> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroNetwork> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroNetwork> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroNetwork> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroNetwork> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroNetwork to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroNetwork from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroNetwork instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroNetwork fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Coordinate reference system */
  private java.lang.CharSequence crs;
  private java.util.List<java.lang.CharSequence> nodeAttributes;
  private java.util.List<java.lang.CharSequence> linkAttributes;
  private java.util.List<java.lang.CharSequence> nodeId;
  private java.util.List<java.lang.Float> nodeCoordinates;
  private java.util.List<java.lang.CharSequence> linkId;
  private java.util.List<java.lang.Integer> from;
  private java.util.List<java.lang.Integer> to;
  private java.util.List<java.lang.CharSequence> modes;
  private java.util.List<java.lang.Float> length;
  private java.util.List<java.lang.Float> freespeed;
  private java.util.List<java.lang.Float> capacity;
  private java.util.List<java.lang.Float> permlanes;
  private java.util.List<java.lang.Integer> allowedModes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroNetwork() {}

  /**
   * All-args constructor.
   * @param crs Coordinate reference system
   * @param nodeAttributes The new value for nodeAttributes
   * @param linkAttributes The new value for linkAttributes
   * @param nodeId The new value for nodeId
   * @param nodeCoordinates The new value for nodeCoordinates
   * @param linkId The new value for linkId
   * @param from The new value for from
   * @param to The new value for to
   * @param modes The new value for modes
   * @param length The new value for length
   * @param freespeed The new value for freespeed
   * @param capacity The new value for capacity
   * @param permlanes The new value for permlanes
   * @param allowedModes The new value for allowedModes
   */
  public AvroNetwork(java.lang.CharSequence crs, java.util.List<java.lang.CharSequence> nodeAttributes, java.util.List<java.lang.CharSequence> linkAttributes, java.util.List<java.lang.CharSequence> nodeId, java.util.List<java.lang.Float> nodeCoordinates, java.util.List<java.lang.CharSequence> linkId, java.util.List<java.lang.Integer> from, java.util.List<java.lang.Integer> to, java.util.List<java.lang.CharSequence> modes, java.util.List<java.lang.Float> length, java.util.List<java.lang.Float> freespeed, java.util.List<java.lang.Float> capacity, java.util.List<java.lang.Float> permlanes, java.util.List<java.lang.Integer> allowedModes) {
    this.crs = crs;
    this.nodeAttributes = nodeAttributes;
    this.linkAttributes = linkAttributes;
    this.nodeId = nodeId;
    this.nodeCoordinates = nodeCoordinates;
    this.linkId = linkId;
    this.from = from;
    this.to = to;
    this.modes = modes;
    this.length = length;
    this.freespeed = freespeed;
    this.capacity = capacity;
    this.permlanes = permlanes;
    this.allowedModes = allowedModes;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return crs;
    case 1: return nodeAttributes;
    case 2: return linkAttributes;
    case 3: return nodeId;
    case 4: return nodeCoordinates;
    case 5: return linkId;
    case 6: return from;
    case 7: return to;
    case 8: return modes;
    case 9: return length;
    case 10: return freespeed;
    case 11: return capacity;
    case 12: return permlanes;
    case 13: return allowedModes;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: crs = (java.lang.CharSequence)value$; break;
    case 1: nodeAttributes = (java.util.List<java.lang.CharSequence>)value$; break;
    case 2: linkAttributes = (java.util.List<java.lang.CharSequence>)value$; break;
    case 3: nodeId = (java.util.List<java.lang.CharSequence>)value$; break;
    case 4: nodeCoordinates = (java.util.List<java.lang.Float>)value$; break;
    case 5: linkId = (java.util.List<java.lang.CharSequence>)value$; break;
    case 6: from = (java.util.List<java.lang.Integer>)value$; break;
    case 7: to = (java.util.List<java.lang.Integer>)value$; break;
    case 8: modes = (java.util.List<java.lang.CharSequence>)value$; break;
    case 9: length = (java.util.List<java.lang.Float>)value$; break;
    case 10: freespeed = (java.util.List<java.lang.Float>)value$; break;
    case 11: capacity = (java.util.List<java.lang.Float>)value$; break;
    case 12: permlanes = (java.util.List<java.lang.Float>)value$; break;
    case 13: allowedModes = (java.util.List<java.lang.Integer>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'crs' field.
   * @return Coordinate reference system
   */
  public java.lang.CharSequence getCrs() {
    return crs;
  }


  /**
   * Sets the value of the 'crs' field.
   * Coordinate reference system
   * @param value the value to set.
   */
  public void setCrs(java.lang.CharSequence value) {
    this.crs = value;
  }

  /**
   * Gets the value of the 'nodeAttributes' field.
   * @return The value of the 'nodeAttributes' field.
   */
  public java.util.List<java.lang.CharSequence> getNodeAttributes() {
    return nodeAttributes;
  }


  /**
   * Sets the value of the 'nodeAttributes' field.
   * @param value the value to set.
   */
  public void setNodeAttributes(java.util.List<java.lang.CharSequence> value) {
    this.nodeAttributes = value;
  }

  /**
   * Gets the value of the 'linkAttributes' field.
   * @return The value of the 'linkAttributes' field.
   */
  public java.util.List<java.lang.CharSequence> getLinkAttributes() {
    return linkAttributes;
  }


  /**
   * Sets the value of the 'linkAttributes' field.
   * @param value the value to set.
   */
  public void setLinkAttributes(java.util.List<java.lang.CharSequence> value) {
    this.linkAttributes = value;
  }

  /**
   * Gets the value of the 'nodeId' field.
   * @return The value of the 'nodeId' field.
   */
  public java.util.List<java.lang.CharSequence> getNodeId() {
    return nodeId;
  }


  /**
   * Sets the value of the 'nodeId' field.
   * @param value the value to set.
   */
  public void setNodeId(java.util.List<java.lang.CharSequence> value) {
    this.nodeId = value;
  }

  /**
   * Gets the value of the 'nodeCoordinates' field.
   * @return The value of the 'nodeCoordinates' field.
   */
  public java.util.List<java.lang.Float> getNodeCoordinates() {
    return nodeCoordinates;
  }


  /**
   * Sets the value of the 'nodeCoordinates' field.
   * @param value the value to set.
   */
  public void setNodeCoordinates(java.util.List<java.lang.Float> value) {
    this.nodeCoordinates = value;
  }

  /**
   * Gets the value of the 'linkId' field.
   * @return The value of the 'linkId' field.
   */
  public java.util.List<java.lang.CharSequence> getLinkId() {
    return linkId;
  }


  /**
   * Sets the value of the 'linkId' field.
   * @param value the value to set.
   */
  public void setLinkId(java.util.List<java.lang.CharSequence> value) {
    this.linkId = value;
  }

  /**
   * Gets the value of the 'from' field.
   * @return The value of the 'from' field.
   */
  public java.util.List<java.lang.Integer> getFrom() {
    return from;
  }


  /**
   * Sets the value of the 'from' field.
   * @param value the value to set.
   */
  public void setFrom(java.util.List<java.lang.Integer> value) {
    this.from = value;
  }

  /**
   * Gets the value of the 'to' field.
   * @return The value of the 'to' field.
   */
  public java.util.List<java.lang.Integer> getTo() {
    return to;
  }


  /**
   * Sets the value of the 'to' field.
   * @param value the value to set.
   */
  public void setTo(java.util.List<java.lang.Integer> value) {
    this.to = value;
  }

  /**
   * Gets the value of the 'modes' field.
   * @return The value of the 'modes' field.
   */
  public java.util.List<java.lang.CharSequence> getModes() {
    return modes;
  }


  /**
   * Sets the value of the 'modes' field.
   * @param value the value to set.
   */
  public void setModes(java.util.List<java.lang.CharSequence> value) {
    this.modes = value;
  }

  /**
   * Gets the value of the 'length' field.
   * @return The value of the 'length' field.
   */
  public java.util.List<java.lang.Float> getLength() {
    return length;
  }


  /**
   * Sets the value of the 'length' field.
   * @param value the value to set.
   */
  public void setLength(java.util.List<java.lang.Float> value) {
    this.length = value;
  }

  /**
   * Gets the value of the 'freespeed' field.
   * @return The value of the 'freespeed' field.
   */
  public java.util.List<java.lang.Float> getFreespeed() {
    return freespeed;
  }


  /**
   * Sets the value of the 'freespeed' field.
   * @param value the value to set.
   */
  public void setFreespeed(java.util.List<java.lang.Float> value) {
    this.freespeed = value;
  }

  /**
   * Gets the value of the 'capacity' field.
   * @return The value of the 'capacity' field.
   */
  public java.util.List<java.lang.Float> getCapacity() {
    return capacity;
  }


  /**
   * Sets the value of the 'capacity' field.
   * @param value the value to set.
   */
  public void setCapacity(java.util.List<java.lang.Float> value) {
    this.capacity = value;
  }

  /**
   * Gets the value of the 'permlanes' field.
   * @return The value of the 'permlanes' field.
   */
  public java.util.List<java.lang.Float> getPermlanes() {
    return permlanes;
  }


  /**
   * Sets the value of the 'permlanes' field.
   * @param value the value to set.
   */
  public void setPermlanes(java.util.List<java.lang.Float> value) {
    this.permlanes = value;
  }

  /**
   * Gets the value of the 'allowedModes' field.
   * @return The value of the 'allowedModes' field.
   */
  public java.util.List<java.lang.Integer> getAllowedModes() {
    return allowedModes;
  }


  /**
   * Sets the value of the 'allowedModes' field.
   * @param value the value to set.
   */
  public void setAllowedModes(java.util.List<java.lang.Integer> value) {
    this.allowedModes = value;
  }

  /**
   * Creates a new AvroNetwork RecordBuilder.
   * @return A new AvroNetwork RecordBuilder
   */
  public static org.matsim.application.avro.AvroNetwork.Builder newBuilder() {
    return new org.matsim.application.avro.AvroNetwork.Builder();
  }

  /**
   * Creates a new AvroNetwork RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroNetwork RecordBuilder
   */
  public static org.matsim.application.avro.AvroNetwork.Builder newBuilder(org.matsim.application.avro.AvroNetwork.Builder other) {
    if (other == null) {
      return new org.matsim.application.avro.AvroNetwork.Builder();
    } else {
      return new org.matsim.application.avro.AvroNetwork.Builder(other);
    }
  }

  /**
   * Creates a new AvroNetwork RecordBuilder by copying an existing AvroNetwork instance.
   * @param other The existing instance to copy.
   * @return A new AvroNetwork RecordBuilder
   */
  public static org.matsim.application.avro.AvroNetwork.Builder newBuilder(org.matsim.application.avro.AvroNetwork other) {
    if (other == null) {
      return new org.matsim.application.avro.AvroNetwork.Builder();
    } else {
      return new org.matsim.application.avro.AvroNetwork.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroNetwork instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroNetwork>
    implements org.apache.avro.data.RecordBuilder<AvroNetwork> {

    /** Coordinate reference system */
    private java.lang.CharSequence crs;
    private java.util.List<java.lang.CharSequence> nodeAttributes;
    private java.util.List<java.lang.CharSequence> linkAttributes;
    private java.util.List<java.lang.CharSequence> nodeId;
    private java.util.List<java.lang.Float> nodeCoordinates;
    private java.util.List<java.lang.CharSequence> linkId;
    private java.util.List<java.lang.Integer> from;
    private java.util.List<java.lang.Integer> to;
    private java.util.List<java.lang.CharSequence> modes;
    private java.util.List<java.lang.Float> length;
    private java.util.List<java.lang.Float> freespeed;
    private java.util.List<java.lang.Float> capacity;
    private java.util.List<java.lang.Float> permlanes;
    private java.util.List<java.lang.Integer> allowedModes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.matsim.application.avro.AvroNetwork.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.crs)) {
        this.crs = data().deepCopy(fields()[0].schema(), other.crs);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.nodeAttributes)) {
        this.nodeAttributes = data().deepCopy(fields()[1].schema(), other.nodeAttributes);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.linkAttributes)) {
        this.linkAttributes = data().deepCopy(fields()[2].schema(), other.linkAttributes);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.nodeId)) {
        this.nodeId = data().deepCopy(fields()[3].schema(), other.nodeId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.nodeCoordinates)) {
        this.nodeCoordinates = data().deepCopy(fields()[4].schema(), other.nodeCoordinates);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.linkId)) {
        this.linkId = data().deepCopy(fields()[5].schema(), other.linkId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.from)) {
        this.from = data().deepCopy(fields()[6].schema(), other.from);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.to)) {
        this.to = data().deepCopy(fields()[7].schema(), other.to);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.modes)) {
        this.modes = data().deepCopy(fields()[8].schema(), other.modes);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.length)) {
        this.length = data().deepCopy(fields()[9].schema(), other.length);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.freespeed)) {
        this.freespeed = data().deepCopy(fields()[10].schema(), other.freespeed);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.capacity)) {
        this.capacity = data().deepCopy(fields()[11].schema(), other.capacity);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.permlanes)) {
        this.permlanes = data().deepCopy(fields()[12].schema(), other.permlanes);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.allowedModes)) {
        this.allowedModes = data().deepCopy(fields()[13].schema(), other.allowedModes);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing AvroNetwork instance
     * @param other The existing instance to copy.
     */
    private Builder(org.matsim.application.avro.AvroNetwork other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.crs)) {
        this.crs = data().deepCopy(fields()[0].schema(), other.crs);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nodeAttributes)) {
        this.nodeAttributes = data().deepCopy(fields()[1].schema(), other.nodeAttributes);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.linkAttributes)) {
        this.linkAttributes = data().deepCopy(fields()[2].schema(), other.linkAttributes);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.nodeId)) {
        this.nodeId = data().deepCopy(fields()[3].schema(), other.nodeId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nodeCoordinates)) {
        this.nodeCoordinates = data().deepCopy(fields()[4].schema(), other.nodeCoordinates);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.linkId)) {
        this.linkId = data().deepCopy(fields()[5].schema(), other.linkId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.from)) {
        this.from = data().deepCopy(fields()[6].schema(), other.from);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.to)) {
        this.to = data().deepCopy(fields()[7].schema(), other.to);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.modes)) {
        this.modes = data().deepCopy(fields()[8].schema(), other.modes);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.length)) {
        this.length = data().deepCopy(fields()[9].schema(), other.length);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.freespeed)) {
        this.freespeed = data().deepCopy(fields()[10].schema(), other.freespeed);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.capacity)) {
        this.capacity = data().deepCopy(fields()[11].schema(), other.capacity);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.permlanes)) {
        this.permlanes = data().deepCopy(fields()[12].schema(), other.permlanes);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.allowedModes)) {
        this.allowedModes = data().deepCopy(fields()[13].schema(), other.allowedModes);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'crs' field.
      * Coordinate reference system
      * @return The value.
      */
    public java.lang.CharSequence getCrs() {
      return crs;
    }


    /**
      * Sets the value of the 'crs' field.
      * Coordinate reference system
      * @param value The value of 'crs'.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder setCrs(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.crs = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'crs' field has been set.
      * Coordinate reference system
      * @return True if the 'crs' field has been set, false otherwise.
      */
    public boolean hasCrs() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'crs' field.
      * Coordinate reference system
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder clearCrs() {
      crs = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nodeAttributes' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getNodeAttributes() {
      return nodeAttributes;
    }


    /**
      * Sets the value of the 'nodeAttributes' field.
      * @param value The value of 'nodeAttributes'.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder setNodeAttributes(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.nodeAttributes = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nodeAttributes' field has been set.
      * @return True if the 'nodeAttributes' field has been set, false otherwise.
      */
    public boolean hasNodeAttributes() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nodeAttributes' field.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder clearNodeAttributes() {
      nodeAttributes = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'linkAttributes' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getLinkAttributes() {
      return linkAttributes;
    }


    /**
      * Sets the value of the 'linkAttributes' field.
      * @param value The value of 'linkAttributes'.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder setLinkAttributes(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.linkAttributes = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'linkAttributes' field has been set.
      * @return True if the 'linkAttributes' field has been set, false otherwise.
      */
    public boolean hasLinkAttributes() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'linkAttributes' field.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder clearLinkAttributes() {
      linkAttributes = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'nodeId' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getNodeId() {
      return nodeId;
    }


    /**
      * Sets the value of the 'nodeId' field.
      * @param value The value of 'nodeId'.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder setNodeId(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.nodeId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'nodeId' field has been set.
      * @return True if the 'nodeId' field has been set, false otherwise.
      */
    public boolean hasNodeId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'nodeId' field.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder clearNodeId() {
      nodeId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'nodeCoordinates' field.
      * @return The value.
      */
    public java.util.List<java.lang.Float> getNodeCoordinates() {
      return nodeCoordinates;
    }


    /**
      * Sets the value of the 'nodeCoordinates' field.
      * @param value The value of 'nodeCoordinates'.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder setNodeCoordinates(java.util.List<java.lang.Float> value) {
      validate(fields()[4], value);
      this.nodeCoordinates = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'nodeCoordinates' field has been set.
      * @return True if the 'nodeCoordinates' field has been set, false otherwise.
      */
    public boolean hasNodeCoordinates() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'nodeCoordinates' field.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder clearNodeCoordinates() {
      nodeCoordinates = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'linkId' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getLinkId() {
      return linkId;
    }


    /**
      * Sets the value of the 'linkId' field.
      * @param value The value of 'linkId'.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder setLinkId(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.linkId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'linkId' field has been set.
      * @return True if the 'linkId' field has been set, false otherwise.
      */
    public boolean hasLinkId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'linkId' field.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder clearLinkId() {
      linkId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'from' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getFrom() {
      return from;
    }


    /**
      * Sets the value of the 'from' field.
      * @param value The value of 'from'.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder setFrom(java.util.List<java.lang.Integer> value) {
      validate(fields()[6], value);
      this.from = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'from' field has been set.
      * @return True if the 'from' field has been set, false otherwise.
      */
    public boolean hasFrom() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'from' field.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder clearFrom() {
      from = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'to' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getTo() {
      return to;
    }


    /**
      * Sets the value of the 'to' field.
      * @param value The value of 'to'.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder setTo(java.util.List<java.lang.Integer> value) {
      validate(fields()[7], value);
      this.to = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'to' field has been set.
      * @return True if the 'to' field has been set, false otherwise.
      */
    public boolean hasTo() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'to' field.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder clearTo() {
      to = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'modes' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getModes() {
      return modes;
    }


    /**
      * Sets the value of the 'modes' field.
      * @param value The value of 'modes'.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder setModes(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[8], value);
      this.modes = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'modes' field has been set.
      * @return True if the 'modes' field has been set, false otherwise.
      */
    public boolean hasModes() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'modes' field.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder clearModes() {
      modes = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'length' field.
      * @return The value.
      */
    public java.util.List<java.lang.Float> getLength() {
      return length;
    }


    /**
      * Sets the value of the 'length' field.
      * @param value The value of 'length'.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder setLength(java.util.List<java.lang.Float> value) {
      validate(fields()[9], value);
      this.length = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'length' field has been set.
      * @return True if the 'length' field has been set, false otherwise.
      */
    public boolean hasLength() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'length' field.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder clearLength() {
      length = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'freespeed' field.
      * @return The value.
      */
    public java.util.List<java.lang.Float> getFreespeed() {
      return freespeed;
    }


    /**
      * Sets the value of the 'freespeed' field.
      * @param value The value of 'freespeed'.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder setFreespeed(java.util.List<java.lang.Float> value) {
      validate(fields()[10], value);
      this.freespeed = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'freespeed' field has been set.
      * @return True if the 'freespeed' field has been set, false otherwise.
      */
    public boolean hasFreespeed() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'freespeed' field.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder clearFreespeed() {
      freespeed = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'capacity' field.
      * @return The value.
      */
    public java.util.List<java.lang.Float> getCapacity() {
      return capacity;
    }


    /**
      * Sets the value of the 'capacity' field.
      * @param value The value of 'capacity'.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder setCapacity(java.util.List<java.lang.Float> value) {
      validate(fields()[11], value);
      this.capacity = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'capacity' field has been set.
      * @return True if the 'capacity' field has been set, false otherwise.
      */
    public boolean hasCapacity() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'capacity' field.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder clearCapacity() {
      capacity = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'permlanes' field.
      * @return The value.
      */
    public java.util.List<java.lang.Float> getPermlanes() {
      return permlanes;
    }


    /**
      * Sets the value of the 'permlanes' field.
      * @param value The value of 'permlanes'.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder setPermlanes(java.util.List<java.lang.Float> value) {
      validate(fields()[12], value);
      this.permlanes = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'permlanes' field has been set.
      * @return True if the 'permlanes' field has been set, false otherwise.
      */
    public boolean hasPermlanes() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'permlanes' field.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder clearPermlanes() {
      permlanes = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'allowedModes' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getAllowedModes() {
      return allowedModes;
    }


    /**
      * Sets the value of the 'allowedModes' field.
      * @param value The value of 'allowedModes'.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder setAllowedModes(java.util.List<java.lang.Integer> value) {
      validate(fields()[13], value);
      this.allowedModes = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'allowedModes' field has been set.
      * @return True if the 'allowedModes' field has been set, false otherwise.
      */
    public boolean hasAllowedModes() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'allowedModes' field.
      * @return This builder.
      */
    public org.matsim.application.avro.AvroNetwork.Builder clearAllowedModes() {
      allowedModes = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroNetwork build() {
      try {
        AvroNetwork record = new AvroNetwork();
        record.crs = fieldSetFlags()[0] ? this.crs : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.nodeAttributes = fieldSetFlags()[1] ? this.nodeAttributes : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
        record.linkAttributes = fieldSetFlags()[2] ? this.linkAttributes : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        record.nodeId = fieldSetFlags()[3] ? this.nodeId : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        record.nodeCoordinates = fieldSetFlags()[4] ? this.nodeCoordinates : (java.util.List<java.lang.Float>) defaultValue(fields()[4]);
        record.linkId = fieldSetFlags()[5] ? this.linkId : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[5]);
        record.from = fieldSetFlags()[6] ? this.from : (java.util.List<java.lang.Integer>) defaultValue(fields()[6]);
        record.to = fieldSetFlags()[7] ? this.to : (java.util.List<java.lang.Integer>) defaultValue(fields()[7]);
        record.modes = fieldSetFlags()[8] ? this.modes : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[8]);
        record.length = fieldSetFlags()[9] ? this.length : (java.util.List<java.lang.Float>) defaultValue(fields()[9]);
        record.freespeed = fieldSetFlags()[10] ? this.freespeed : (java.util.List<java.lang.Float>) defaultValue(fields()[10]);
        record.capacity = fieldSetFlags()[11] ? this.capacity : (java.util.List<java.lang.Float>) defaultValue(fields()[11]);
        record.permlanes = fieldSetFlags()[12] ? this.permlanes : (java.util.List<java.lang.Float>) defaultValue(fields()[12]);
        record.allowedModes = fieldSetFlags()[13] ? this.allowedModes : (java.util.List<java.lang.Integer>) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroNetwork>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroNetwork>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroNetwork>
    READER$ = (org.apache.avro.io.DatumReader<AvroNetwork>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.crs);

    long size0 = this.nodeAttributes.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.nodeAttributes) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.linkAttributes.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.CharSequence e1: this.linkAttributes) {
      actualSize1++;
      out.startItem();
      out.writeString(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.nodeId.size();
    out.writeArrayStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (java.lang.CharSequence e2: this.nodeId) {
      actualSize2++;
      out.startItem();
      out.writeString(e2);
    }
    out.writeArrayEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

    long size3 = this.nodeCoordinates.size();
    out.writeArrayStart();
    out.setItemCount(size3);
    long actualSize3 = 0;
    for (java.lang.Float e3: this.nodeCoordinates) {
      actualSize3++;
      out.startItem();
      out.writeFloat(e3);
    }
    out.writeArrayEnd();
    if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");

    long size4 = this.linkId.size();
    out.writeArrayStart();
    out.setItemCount(size4);
    long actualSize4 = 0;
    for (java.lang.CharSequence e4: this.linkId) {
      actualSize4++;
      out.startItem();
      out.writeString(e4);
    }
    out.writeArrayEnd();
    if (actualSize4 != size4)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");

    long size5 = this.from.size();
    out.writeArrayStart();
    out.setItemCount(size5);
    long actualSize5 = 0;
    for (java.lang.Integer e5: this.from) {
      actualSize5++;
      out.startItem();
      out.writeInt(e5);
    }
    out.writeArrayEnd();
    if (actualSize5 != size5)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size5 + ", but element count was " + actualSize5 + ".");

    long size6 = this.to.size();
    out.writeArrayStart();
    out.setItemCount(size6);
    long actualSize6 = 0;
    for (java.lang.Integer e6: this.to) {
      actualSize6++;
      out.startItem();
      out.writeInt(e6);
    }
    out.writeArrayEnd();
    if (actualSize6 != size6)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size6 + ", but element count was " + actualSize6 + ".");

    long size7 = this.modes.size();
    out.writeArrayStart();
    out.setItemCount(size7);
    long actualSize7 = 0;
    for (java.lang.CharSequence e7: this.modes) {
      actualSize7++;
      out.startItem();
      out.writeString(e7);
    }
    out.writeArrayEnd();
    if (actualSize7 != size7)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size7 + ", but element count was " + actualSize7 + ".");

    long size8 = this.length.size();
    out.writeArrayStart();
    out.setItemCount(size8);
    long actualSize8 = 0;
    for (java.lang.Float e8: this.length) {
      actualSize8++;
      out.startItem();
      out.writeFloat(e8);
    }
    out.writeArrayEnd();
    if (actualSize8 != size8)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size8 + ", but element count was " + actualSize8 + ".");

    long size9 = this.freespeed.size();
    out.writeArrayStart();
    out.setItemCount(size9);
    long actualSize9 = 0;
    for (java.lang.Float e9: this.freespeed) {
      actualSize9++;
      out.startItem();
      out.writeFloat(e9);
    }
    out.writeArrayEnd();
    if (actualSize9 != size9)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size9 + ", but element count was " + actualSize9 + ".");

    long size10 = this.capacity.size();
    out.writeArrayStart();
    out.setItemCount(size10);
    long actualSize10 = 0;
    for (java.lang.Float e10: this.capacity) {
      actualSize10++;
      out.startItem();
      out.writeFloat(e10);
    }
    out.writeArrayEnd();
    if (actualSize10 != size10)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size10 + ", but element count was " + actualSize10 + ".");

    long size11 = this.permlanes.size();
    out.writeArrayStart();
    out.setItemCount(size11);
    long actualSize11 = 0;
    for (java.lang.Float e11: this.permlanes) {
      actualSize11++;
      out.startItem();
      out.writeFloat(e11);
    }
    out.writeArrayEnd();
    if (actualSize11 != size11)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size11 + ", but element count was " + actualSize11 + ".");

    long size12 = this.allowedModes.size();
    out.writeArrayStart();
    out.setItemCount(size12);
    long actualSize12 = 0;
    for (java.lang.Integer e12: this.allowedModes) {
      actualSize12++;
      out.startItem();
      out.writeInt(e12);
    }
    out.writeArrayEnd();
    if (actualSize12 != size12)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size12 + ", but element count was " + actualSize12 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.crs = in.readString(this.crs instanceof Utf8 ? (Utf8)this.crs : null);

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.nodeAttributes;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("nodeAttributes").schema());
        this.nodeAttributes = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a1 = this.linkAttributes;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("linkAttributes").schema());
        this.linkAttributes = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
          a1.add(e1);
        }
      }

      long size2 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a2 = this.nodeId;
      if (a2 == null) {
        a2 = new SpecificData.Array<java.lang.CharSequence>((int)size2, SCHEMA$.getField("nodeId").schema());
        this.nodeId = a2;
      } else a2.clear();
      SpecificData.Array<java.lang.CharSequence> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a2 : null);
      for ( ; 0 < size2; size2 = in.arrayNext()) {
        for ( ; size2 != 0; size2--) {
          java.lang.CharSequence e2 = (ga2 != null ? ga2.peek() : null);
          e2 = in.readString(e2 instanceof Utf8 ? (Utf8)e2 : null);
          a2.add(e2);
        }
      }

      long size3 = in.readArrayStart();
      java.util.List<java.lang.Float> a3 = this.nodeCoordinates;
      if (a3 == null) {
        a3 = new SpecificData.Array<java.lang.Float>((int)size3, SCHEMA$.getField("nodeCoordinates").schema());
        this.nodeCoordinates = a3;
      } else a3.clear();
      SpecificData.Array<java.lang.Float> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a3 : null);
      for ( ; 0 < size3; size3 = in.arrayNext()) {
        for ( ; size3 != 0; size3--) {
          java.lang.Float e3 = (ga3 != null ? ga3.peek() : null);
          e3 = in.readFloat();
          a3.add(e3);
        }
      }

      long size4 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a4 = this.linkId;
      if (a4 == null) {
        a4 = new SpecificData.Array<java.lang.CharSequence>((int)size4, SCHEMA$.getField("linkId").schema());
        this.linkId = a4;
      } else a4.clear();
      SpecificData.Array<java.lang.CharSequence> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a4 : null);
      for ( ; 0 < size4; size4 = in.arrayNext()) {
        for ( ; size4 != 0; size4--) {
          java.lang.CharSequence e4 = (ga4 != null ? ga4.peek() : null);
          e4 = in.readString(e4 instanceof Utf8 ? (Utf8)e4 : null);
          a4.add(e4);
        }
      }

      long size5 = in.readArrayStart();
      java.util.List<java.lang.Integer> a5 = this.from;
      if (a5 == null) {
        a5 = new SpecificData.Array<java.lang.Integer>((int)size5, SCHEMA$.getField("from").schema());
        this.from = a5;
      } else a5.clear();
      SpecificData.Array<java.lang.Integer> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a5 : null);
      for ( ; 0 < size5; size5 = in.arrayNext()) {
        for ( ; size5 != 0; size5--) {
          java.lang.Integer e5 = (ga5 != null ? ga5.peek() : null);
          e5 = in.readInt();
          a5.add(e5);
        }
      }

      long size6 = in.readArrayStart();
      java.util.List<java.lang.Integer> a6 = this.to;
      if (a6 == null) {
        a6 = new SpecificData.Array<java.lang.Integer>((int)size6, SCHEMA$.getField("to").schema());
        this.to = a6;
      } else a6.clear();
      SpecificData.Array<java.lang.Integer> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a6 : null);
      for ( ; 0 < size6; size6 = in.arrayNext()) {
        for ( ; size6 != 0; size6--) {
          java.lang.Integer e6 = (ga6 != null ? ga6.peek() : null);
          e6 = in.readInt();
          a6.add(e6);
        }
      }

      long size7 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a7 = this.modes;
      if (a7 == null) {
        a7 = new SpecificData.Array<java.lang.CharSequence>((int)size7, SCHEMA$.getField("modes").schema());
        this.modes = a7;
      } else a7.clear();
      SpecificData.Array<java.lang.CharSequence> ga7 = (a7 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a7 : null);
      for ( ; 0 < size7; size7 = in.arrayNext()) {
        for ( ; size7 != 0; size7--) {
          java.lang.CharSequence e7 = (ga7 != null ? ga7.peek() : null);
          e7 = in.readString(e7 instanceof Utf8 ? (Utf8)e7 : null);
          a7.add(e7);
        }
      }

      long size8 = in.readArrayStart();
      java.util.List<java.lang.Float> a8 = this.length;
      if (a8 == null) {
        a8 = new SpecificData.Array<java.lang.Float>((int)size8, SCHEMA$.getField("length").schema());
        this.length = a8;
      } else a8.clear();
      SpecificData.Array<java.lang.Float> ga8 = (a8 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a8 : null);
      for ( ; 0 < size8; size8 = in.arrayNext()) {
        for ( ; size8 != 0; size8--) {
          java.lang.Float e8 = (ga8 != null ? ga8.peek() : null);
          e8 = in.readFloat();
          a8.add(e8);
        }
      }

      long size9 = in.readArrayStart();
      java.util.List<java.lang.Float> a9 = this.freespeed;
      if (a9 == null) {
        a9 = new SpecificData.Array<java.lang.Float>((int)size9, SCHEMA$.getField("freespeed").schema());
        this.freespeed = a9;
      } else a9.clear();
      SpecificData.Array<java.lang.Float> ga9 = (a9 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a9 : null);
      for ( ; 0 < size9; size9 = in.arrayNext()) {
        for ( ; size9 != 0; size9--) {
          java.lang.Float e9 = (ga9 != null ? ga9.peek() : null);
          e9 = in.readFloat();
          a9.add(e9);
        }
      }

      long size10 = in.readArrayStart();
      java.util.List<java.lang.Float> a10 = this.capacity;
      if (a10 == null) {
        a10 = new SpecificData.Array<java.lang.Float>((int)size10, SCHEMA$.getField("capacity").schema());
        this.capacity = a10;
      } else a10.clear();
      SpecificData.Array<java.lang.Float> ga10 = (a10 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a10 : null);
      for ( ; 0 < size10; size10 = in.arrayNext()) {
        for ( ; size10 != 0; size10--) {
          java.lang.Float e10 = (ga10 != null ? ga10.peek() : null);
          e10 = in.readFloat();
          a10.add(e10);
        }
      }

      long size11 = in.readArrayStart();
      java.util.List<java.lang.Float> a11 = this.permlanes;
      if (a11 == null) {
        a11 = new SpecificData.Array<java.lang.Float>((int)size11, SCHEMA$.getField("permlanes").schema());
        this.permlanes = a11;
      } else a11.clear();
      SpecificData.Array<java.lang.Float> ga11 = (a11 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a11 : null);
      for ( ; 0 < size11; size11 = in.arrayNext()) {
        for ( ; size11 != 0; size11--) {
          java.lang.Float e11 = (ga11 != null ? ga11.peek() : null);
          e11 = in.readFloat();
          a11.add(e11);
        }
      }

      long size12 = in.readArrayStart();
      java.util.List<java.lang.Integer> a12 = this.allowedModes;
      if (a12 == null) {
        a12 = new SpecificData.Array<java.lang.Integer>((int)size12, SCHEMA$.getField("allowedModes").schema());
        this.allowedModes = a12;
      } else a12.clear();
      SpecificData.Array<java.lang.Integer> ga12 = (a12 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a12 : null);
      for ( ; 0 < size12; size12 = in.arrayNext()) {
        for ( ; size12 != 0; size12--) {
          java.lang.Integer e12 = (ga12 != null ? ga12.peek() : null);
          e12 = in.readInt();
          a12.add(e12);
        }
      }

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.crs = in.readString(this.crs instanceof Utf8 ? (Utf8)this.crs : null);
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.nodeAttributes;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("nodeAttributes").schema());
            this.nodeAttributes = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 2:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a1 = this.linkAttributes;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("linkAttributes").schema());
            this.linkAttributes = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
              a1.add(e1);
            }
          }
          break;

        case 3:
          long size2 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a2 = this.nodeId;
          if (a2 == null) {
            a2 = new SpecificData.Array<java.lang.CharSequence>((int)size2, SCHEMA$.getField("nodeId").schema());
            this.nodeId = a2;
          } else a2.clear();
          SpecificData.Array<java.lang.CharSequence> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              java.lang.CharSequence e2 = (ga2 != null ? ga2.peek() : null);
              e2 = in.readString(e2 instanceof Utf8 ? (Utf8)e2 : null);
              a2.add(e2);
            }
          }
          break;

        case 4:
          long size3 = in.readArrayStart();
          java.util.List<java.lang.Float> a3 = this.nodeCoordinates;
          if (a3 == null) {
            a3 = new SpecificData.Array<java.lang.Float>((int)size3, SCHEMA$.getField("nodeCoordinates").schema());
            this.nodeCoordinates = a3;
          } else a3.clear();
          SpecificData.Array<java.lang.Float> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a3 : null);
          for ( ; 0 < size3; size3 = in.arrayNext()) {
            for ( ; size3 != 0; size3--) {
              java.lang.Float e3 = (ga3 != null ? ga3.peek() : null);
              e3 = in.readFloat();
              a3.add(e3);
            }
          }
          break;

        case 5:
          long size4 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a4 = this.linkId;
          if (a4 == null) {
            a4 = new SpecificData.Array<java.lang.CharSequence>((int)size4, SCHEMA$.getField("linkId").schema());
            this.linkId = a4;
          } else a4.clear();
          SpecificData.Array<java.lang.CharSequence> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a4 : null);
          for ( ; 0 < size4; size4 = in.arrayNext()) {
            for ( ; size4 != 0; size4--) {
              java.lang.CharSequence e4 = (ga4 != null ? ga4.peek() : null);
              e4 = in.readString(e4 instanceof Utf8 ? (Utf8)e4 : null);
              a4.add(e4);
            }
          }
          break;

        case 6:
          long size5 = in.readArrayStart();
          java.util.List<java.lang.Integer> a5 = this.from;
          if (a5 == null) {
            a5 = new SpecificData.Array<java.lang.Integer>((int)size5, SCHEMA$.getField("from").schema());
            this.from = a5;
          } else a5.clear();
          SpecificData.Array<java.lang.Integer> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a5 : null);
          for ( ; 0 < size5; size5 = in.arrayNext()) {
            for ( ; size5 != 0; size5--) {
              java.lang.Integer e5 = (ga5 != null ? ga5.peek() : null);
              e5 = in.readInt();
              a5.add(e5);
            }
          }
          break;

        case 7:
          long size6 = in.readArrayStart();
          java.util.List<java.lang.Integer> a6 = this.to;
          if (a6 == null) {
            a6 = new SpecificData.Array<java.lang.Integer>((int)size6, SCHEMA$.getField("to").schema());
            this.to = a6;
          } else a6.clear();
          SpecificData.Array<java.lang.Integer> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a6 : null);
          for ( ; 0 < size6; size6 = in.arrayNext()) {
            for ( ; size6 != 0; size6--) {
              java.lang.Integer e6 = (ga6 != null ? ga6.peek() : null);
              e6 = in.readInt();
              a6.add(e6);
            }
          }
          break;

        case 8:
          long size7 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a7 = this.modes;
          if (a7 == null) {
            a7 = new SpecificData.Array<java.lang.CharSequence>((int)size7, SCHEMA$.getField("modes").schema());
            this.modes = a7;
          } else a7.clear();
          SpecificData.Array<java.lang.CharSequence> ga7 = (a7 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a7 : null);
          for ( ; 0 < size7; size7 = in.arrayNext()) {
            for ( ; size7 != 0; size7--) {
              java.lang.CharSequence e7 = (ga7 != null ? ga7.peek() : null);
              e7 = in.readString(e7 instanceof Utf8 ? (Utf8)e7 : null);
              a7.add(e7);
            }
          }
          break;

        case 9:
          long size8 = in.readArrayStart();
          java.util.List<java.lang.Float> a8 = this.length;
          if (a8 == null) {
            a8 = new SpecificData.Array<java.lang.Float>((int)size8, SCHEMA$.getField("length").schema());
            this.length = a8;
          } else a8.clear();
          SpecificData.Array<java.lang.Float> ga8 = (a8 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a8 : null);
          for ( ; 0 < size8; size8 = in.arrayNext()) {
            for ( ; size8 != 0; size8--) {
              java.lang.Float e8 = (ga8 != null ? ga8.peek() : null);
              e8 = in.readFloat();
              a8.add(e8);
            }
          }
          break;

        case 10:
          long size9 = in.readArrayStart();
          java.util.List<java.lang.Float> a9 = this.freespeed;
          if (a9 == null) {
            a9 = new SpecificData.Array<java.lang.Float>((int)size9, SCHEMA$.getField("freespeed").schema());
            this.freespeed = a9;
          } else a9.clear();
          SpecificData.Array<java.lang.Float> ga9 = (a9 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a9 : null);
          for ( ; 0 < size9; size9 = in.arrayNext()) {
            for ( ; size9 != 0; size9--) {
              java.lang.Float e9 = (ga9 != null ? ga9.peek() : null);
              e9 = in.readFloat();
              a9.add(e9);
            }
          }
          break;

        case 11:
          long size10 = in.readArrayStart();
          java.util.List<java.lang.Float> a10 = this.capacity;
          if (a10 == null) {
            a10 = new SpecificData.Array<java.lang.Float>((int)size10, SCHEMA$.getField("capacity").schema());
            this.capacity = a10;
          } else a10.clear();
          SpecificData.Array<java.lang.Float> ga10 = (a10 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a10 : null);
          for ( ; 0 < size10; size10 = in.arrayNext()) {
            for ( ; size10 != 0; size10--) {
              java.lang.Float e10 = (ga10 != null ? ga10.peek() : null);
              e10 = in.readFloat();
              a10.add(e10);
            }
          }
          break;

        case 12:
          long size11 = in.readArrayStart();
          java.util.List<java.lang.Float> a11 = this.permlanes;
          if (a11 == null) {
            a11 = new SpecificData.Array<java.lang.Float>((int)size11, SCHEMA$.getField("permlanes").schema());
            this.permlanes = a11;
          } else a11.clear();
          SpecificData.Array<java.lang.Float> ga11 = (a11 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a11 : null);
          for ( ; 0 < size11; size11 = in.arrayNext()) {
            for ( ; size11 != 0; size11--) {
              java.lang.Float e11 = (ga11 != null ? ga11.peek() : null);
              e11 = in.readFloat();
              a11.add(e11);
            }
          }
          break;

        case 13:
          long size12 = in.readArrayStart();
          java.util.List<java.lang.Integer> a12 = this.allowedModes;
          if (a12 == null) {
            a12 = new SpecificData.Array<java.lang.Integer>((int)size12, SCHEMA$.getField("allowedModes").schema());
            this.allowedModes = a12;
          } else a12.clear();
          SpecificData.Array<java.lang.Integer> ga12 = (a12 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a12 : null);
          for ( ; 0 < size12; size12 = in.arrayNext()) {
            for ( ; size12 != 0; size12--) {
              java.lang.Integer e12 = (ga12 != null ? ga12.peek() : null);
              e12 = in.readInt();
              a12.add(e12);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










