package playground.sebhoerl.av.scoring;

import org.matsim.api.core.v01.events.Event;
import org.matsim.api.core.v01.events.PersonDepartureEvent;
import org.matsim.api.core.v01.events.PersonEntersVehicleEvent;
import org.matsim.core.scoring.SumScoringFunction;

import playground.sebhoerl.av.framework.AVModule;

public class WaitingTimeScoring implements SumScoringFunction.ArbitraryEventScoring {
    final double NO_DEPARTURE = -1.0;
    
    private double departureTime = NO_DEPARTURE;
    private double score = 0.0;
    
    private double marginalUtilityOfWaiting;
    private double marginalUtilityOfTraveling;
    
    public WaitingTimeScoring(double marginalUtilityOfWaiting, double marginalUtilityOfTraveling) {
        this.marginalUtilityOfWaiting = marginalUtilityOfWaiting;
        this.marginalUtilityOfTraveling = marginalUtilityOfTraveling;
    }
    
    @Override
    public void handleEvent(Event event) {
        if (event instanceof PersonDepartureEvent) {
            if (((PersonDepartureEvent) event).getLegMode() == AVModule.AV_MODE) {
                if (departureTime != NO_DEPARTURE) {
                    throw new IllegalStateException();
                }
                
                this.departureTime = event.getTime();
            }
        } else if (event instanceof PersonEntersVehicleEvent && departureTime != NO_DEPARTURE) {
            double waitingTime = event.getTime() - departureTime;
            
            // Compensate for the utility that is generated by the CharyparNagelLegScoring
            score += marginalUtilityOfWaiting * waitingTime - marginalUtilityOfTraveling * waitingTime;
            departureTime = NO_DEPARTURE;
        }
    }
    
    @Override
    public void finish() {}

    @Override
    public double getScore() {
        return score;
    }
}
